<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Jonathan Peacher</title><link>http://www.djpeacher.com/posts/</link><description>Recent content in Posts on Jonathan Peacher</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>All work licensed under CC BY-SA 4.0 unless otherwise stated.</copyright><lastBuildDate>Wed, 03 Aug 2022 00:00:00 +0000</lastBuildDate><atom:link href="http://www.djpeacher.com/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>How to Be a Lazy Dungeon Master</title><link>http://www.djpeacher.com/posts/how-to-be-a-lazy-dungeon-master/</link><pubDate>Wed, 03 Aug 2022 00:00:00 +0000</pubDate><guid>http://www.djpeacher.com/posts/how-to-be-a-lazy-dungeon-master/</guid><description>&lt;h2 id="the-lazy-dungeon-masters-checklist">The Lazy Dungeon Master&amp;rsquo;s Checklist&lt;/h2>
&lt;p>The steps it takes to prepare a typical game session can be boiled down into a simple checklist:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#review-the-characters">Review the characters&lt;/a>&lt;/li>
&lt;li>&lt;a href="#create-a-strong-start">Create a strong start&lt;/a>&lt;/li>
&lt;li>&lt;a href="#outline-potential-scenes">Outline potential scenes&lt;/a>&lt;/li>
&lt;li>&lt;a href="#define-secrets-and-clues">Define secrets and clues&lt;/a>&lt;/li>
&lt;li>&lt;a href="#develop-fantastic-locations">Develop fantastic locations&lt;/a>&lt;/li>
&lt;li>&lt;a href="#outline-important-npcs">Outline important NPCs&lt;/a>&lt;/li>
&lt;li>&lt;a href="#choose-relevant-monsters">Choose relevant monsters&lt;/a>&lt;/li>
&lt;li>&lt;a href="#select-magic-item-rewards">Select magic item rewards&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="review-the-characters-hahahugoshortcode-s0-hbhb">Review the characters &lt;i class="twa twa-thinking-face">&lt;/i>&lt;/h3>
&lt;p>The first thing you need to do is write down the names, backgrounds, motivations, and desires of the characters. Use these notes to prime your brain and tie the characters to the rest of your game.&lt;/p>
&lt;h3 id="create-a-strong-start-hahahugoshortcode-s1-hbhb">Create a strong start &lt;i class="twa twa-flexed-biceps-light-skin-tone">&lt;/i>&lt;/h3>
&lt;p>Set the stage by asking yourself, what&amp;rsquo;s happening, what&amp;rsquo;s the point, and where&amp;rsquo;s the action? We are looking for an event, hook, and closest action in one, maybe two, sentences. When in doubt, start with combat.&lt;/p>
&lt;h3 id="outline-potential-scenes-hahahugoshortcode-s2-hbhb">Outline potential scenes &lt;i class="twa twa-clapper-board">&lt;/i>&lt;/h3>
&lt;p>Write down a short list of scenes that &lt;strong>might&lt;/strong> occur in your game. Only write down as much as you need to prime your brain. These scenes are not in any specific order and may not even occur.&lt;/p>
&lt;h3 id="define-secrets-and-clues-hahahugoshortcode-s3-hbhb">Define secrets and clues &lt;i class="twa twa-magnifying-glass-tilted-right">&lt;/i>&lt;/h3>
&lt;p>Write down ten secrets and clues the characters &lt;strong>might&lt;/strong> discover during your game. These secrets and clues bring your campaign to life and reveal small pieces of the story or history of the world. They should be abstract enough to allow you to improvise their discovery during the game.&lt;/p>
&lt;h3 id="develop-fantastic-locations-hahahugoshortcode-s4-hbhb">Develop fantastic locations &lt;i class="twa twa-national-park">&lt;/i>&lt;/h3>
&lt;p>Develop one or two locations that the characters &lt;strong>might&lt;/strong> discover for every hour of play you expect to have. These locations need to have an evocative name, three fantastic aspects, and be described using age and size. It is also a good idea to tie some of these locations to the backgrounds of the characters.&lt;/p>
&lt;h3 id="outline-important-npcs-hahahugoshortcode-s5-hbhb">Outline important NPCs &lt;i class="twa twa-robot">&lt;/i>&lt;/h3>
&lt;p>Prepare a few NPCs that the characters &lt;strong>might&lt;/strong> discover and will drive the game session and the adventure. Improvise others during the game. NPC outlines should be brief and include a name, connection to the adventure, and a character archetype.&lt;/p>
&lt;h3 id="choose-relevant-monsters-hahahugoshortcode-s6-hbhb">Choose relevant monsters &lt;i class="twa twa-man-zombie">&lt;/i>&lt;/h3>
&lt;p>Make a list of monsters the characters &lt;strong>might&lt;/strong> encounter that make sense for the story, situation, and location of your game. Don&amp;rsquo;t tie these monsters to any specific location or situation. Instead, improvise encounters based on the story and situation during the game. For boss fights, remember to account for character capabilities without negating those capabilities.&lt;/p>
&lt;h3 id="select-magic-item-rewards-hahahugoshortcode-s7-hbhb">Select magic item rewards &lt;i class="twa twa-magic-wand">&lt;/i>&lt;/h3>
&lt;p>Players love magic items! Regularly ask the players what kinds of items they&amp;rsquo;d like to discover. Use that information to make a list of magic items that the characters &lt;strong>might&lt;/strong> discover during your game. When it fits the story, drop an item into the game. You can also drop in random magic items for some variability. You can tie magic items to the story by connecting them to quests, secrets, or clues.&lt;/p>
&lt;h2 id="adventuremd">adventure.md&lt;/h2>
&lt;p>The Lazy Dungeon Master&amp;rsquo;s Checklist should easily fit on a single page. Here is a markdown template for your next session!&lt;/p>
&lt;p>Roll for initiative! &lt;i class="twa twa-game-die">&lt;/i>&lt;/p>
&lt;pre tabindex="0">&lt;code>## The Strong Start
Description of your strong start.
## Potential Scenes
- Description of your scene.
-
## Secrets and Clues
- Description of a secret or clue.
-
-
-
-
-
-
-
-
-
## Fantastic Locations
**Location**: aspect, aspect, aspect
**Location**: aspect, aspect, aspect
**Location**: aspect, aspect, aspect
## NPCs
**Name.** Description/Connection. *Character* from *X*.
**Name.** Description/Connection. *Character* from *X*.
**Name.** Description/Connection. *Character* from *X*.
## Monsters
- Name
-
## Magic Items
- Name/Description
-
&lt;/code>&lt;/pre></description></item><item><title>Python Version Manager 101 (pyenv)</title><link>http://www.djpeacher.com/posts/pyenv/</link><pubDate>Mon, 28 Feb 2022 00:00:00 +0000</pubDate><guid>http://www.djpeacher.com/posts/pyenv/</guid><description>&lt;p>When you boot up a new machine, it will usually come preinstalled with a version of Python. You can verify this by running the following:&lt;/p>
&lt;pre tabindex="0">&lt;code># This shows the version installed.
$ python -V
Python 2.7.18
# This shows the location of the installation.
$ which python
/usr/bin/python
&lt;/code>&lt;/pre>&lt;p>That&amp;rsquo;s great, but &lt;strong>do not use &amp;ldquo;System Python.&amp;rdquo;&lt;/strong> It came with your operating system because it is a dependency that should not be tampered with. Doing so could harm your system or the very least, cause you a lot of grief down the road.&lt;/p>
&lt;p>You could work around this by manually installing other versions of Python, but that is hard to manage and can get messy fast, especially if you have multiple projects depending on &lt;strong>different&lt;/strong> versions of Python.&lt;/p>
&lt;p>Instead of dealing with all that, you might want to invest of few minutes setting up a &lt;strong>Python Version Manager&lt;/strong>, in this case, &lt;code>pyenv&lt;/code>, that will let you easily switch between multiple versions of Python.&lt;/p>
&lt;p>If that sounds good to you, continue reading to learn how to install and use &lt;code>pyenv&lt;/code>.&lt;/p>
&lt;h2 id="installation">Installation&lt;/h2>
&lt;p>I&amp;rsquo;m not going to get super specific on the installation of &lt;code>pyenv&lt;/code> because it depends on the machine you are working with. These instructions are what got me set up on my specific machine (M1 Mac using Zsh), so your mileage may vary. Here are the official instructions if these don&amp;rsquo;t work for you.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://brew.sh">homebrew&lt;/a>, the missing package manager for macOS.&lt;/li>
&lt;li>&lt;a href="https://github.com/pyenv/pyenv#installation">pyenv&lt;/a>, the python version manager.&lt;/li>
&lt;li>&lt;a href="https://github.com/pyenv/pyenv-virtualenv#installation">pyenv-virtualenv&lt;/a>, a virtualenv plugin for &lt;code>pyenv&lt;/code>.&lt;/li>
&lt;/ul>
&lt;h3 id="dependencies">Dependencies&lt;/h3>
&lt;p>Before you can install &lt;code>pyenv&lt;/code>, you need to install all its dependencies.&lt;/p>
&lt;pre tabindex="0">&lt;code># Install Xcode Command Line Tools
xcode-select --install
# Install Homebrew
/bin/bash -c &amp;#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&amp;#34;
echo &amp;#39;export PATH=/opt/homebrew/bin:$PATH&amp;#39; &amp;gt;&amp;gt; ~/.zshrc
# Install Python build dependencies
brew install openssl readline sqlite3 xz zlib
&lt;/code>&lt;/pre>&lt;h3 id="install-pyenv">Install &lt;code>pyenv&lt;/code>&lt;/h3>
&lt;p>Now we can install &lt;code>pyenv&lt;/code> using &lt;code>brew&lt;/code> and configure your terminal to let &lt;code>pyenv&lt;/code> dictate which version of Python you are using.&lt;/p>
&lt;pre tabindex="0">&lt;code># Install pyenv
brew install pyenv pyenv-virtualenv
# Configure shell environment
echo &amp;#39;eval &amp;#34;$(pyenv init --path)&amp;#34;&amp;#39; &amp;gt;&amp;gt; ~/.zshrc
echo &amp;#39;eval &amp;#34;$(pyenv virtualenv-init -)&amp;#34;&amp;#39; &amp;gt;&amp;gt; ~/.zshrc
echo &amp;#39;if which pyenv-virtualenv-init &amp;gt; /dev/null; then eval &amp;#34;$(pyenv virtualenv-init -)&amp;#34;; fi&amp;#39; &amp;gt;&amp;gt; ~/.zprofile
&lt;/code>&lt;/pre>&lt;p>You know you&amp;rsquo;ve set everything up correctly if you see the following:&lt;/p>
&lt;pre tabindex="0">&lt;code># You&amp;#39;ve installed pyenv!
$ pyenv --version
pyenv 2.2.4
# pyenv put itself between your system and terminal!
# Notice that the installation path is different now.
$ which python
/Users/&amp;lt;user&amp;gt;/.pyenv/shims/python
&lt;/code>&lt;/pre>&lt;h2 id="usage">Usage&lt;/h2>
&lt;p>With &lt;code>pyenv&lt;/code> installed, we can do some powerful stuff!&lt;/p>
&lt;ul>
&lt;li>Install pretty much whatever version of Python we want.&lt;/li>
&lt;li>Create virtualenvs that act like separate Python installations.&lt;/li>
&lt;li>Set the global, local, and shell versions of Python we want to use.&lt;/li>
&lt;/ul>
&lt;h3 id="how-it-works">How It Works&lt;/h3>
&lt;p>By default, &lt;code>pyenv&lt;/code> will use &amp;ldquo;System Python,&amp;rdquo; which as I mentioned we shouldn&amp;rsquo;t use, so we need to install other versions. When you install a new version of Python using &lt;code>pyenv&lt;/code>, it stores them in its root directory (&lt;code>~/.pyenv&lt;/code>).&lt;/p>
&lt;p>After we install the versions of Python we want, we need to tell &lt;code>pyenv&lt;/code> where and when we want to use each version by using the &lt;code>global&lt;/code>, &lt;code>local&lt;/code>, and &lt;code>shell&lt;/code> commands.&lt;/p>
&lt;ul>
&lt;li>When we use the &lt;code>global&lt;/code> command, we are setting the global Python version. &lt;code>pyenv&lt;/code> records this information in this file &lt;code>~/.pyenv/version&lt;/code>.&lt;/li>
&lt;li>When we use the &lt;code>local&lt;/code> command, we are setting the local application-specific Python version. This will apply to all its subdirectories as well! &lt;code>pyenv&lt;/code> records this information by creating a file in the current directory called &lt;code>.python-version&lt;/code>.&lt;/li>
&lt;li>When we use the &lt;code>shell&lt;/code> command, we are setting the shell-specific Python version. &lt;code>pyenv&lt;/code> records this information by setting the &lt;code>$PYENV_VERSION&lt;/code> environment variable.&lt;/li>
&lt;/ul>
&lt;h4 id="so-how-does-pyenv-decide-which-version-to-use">So how does &lt;code>pyenv&lt;/code> decide which version to use?&lt;/h4>
&lt;p>As we move between directories &lt;code>pyenv&lt;/code> searches for the files and environment variable we set above and processes them in the following order:&lt;/p>
&lt;ol>
&lt;li>&lt;code>$PYENV_VERSION&lt;/code>. This version will be used if set.&lt;/li>
&lt;li>&lt;code>.python-version&lt;/code>. This version will be used if this file exists.&lt;/li>
&lt;li>&lt;code>~/.pyenv/version&lt;/code>. This version will be used if this file exists.&lt;/li>
&lt;li>If none of these exist, it will use &amp;ldquo;System Python&amp;rdquo;.&lt;/li>
&lt;/ol>
&lt;h4 id="what-about-virtualenvs">What about virtualenvs?&lt;/h4>
&lt;p>Working with virtualenvs is extremely simple. All we have to do is use the &lt;code>virtualenv&lt;/code> command and specify the version of Python we want to use. &lt;code>pyenv&lt;/code> then creates the virtualenv it&amp;rsquo;s root directory which we can use with the &lt;code>global&lt;/code>, &lt;code>local&lt;/code>, and &lt;code>shell&lt;/code> commands, just like the full Python installations!&lt;/p>
&lt;p>And if you configured your shell correctly, you don&amp;rsquo;t even have to run any &lt;code>activate&lt;/code> or &lt;code>deactivate&lt;/code> commands, &lt;code>pyenv&lt;/code> will handle that when you enter and leave directories.&lt;/p>
&lt;h3 id="command-overview">Command Overview&lt;/h3>
&lt;p>Now that you have a basic understanding of how &lt;code>pyenv&lt;/code> works, here is an overview of its available commands.&lt;/p>
&lt;h4 id="install">&lt;code>install&lt;/code>&lt;/h4>
&lt;p>Install a Python version using python-build. &lt;code>pyenv&lt;/code> builds each installation from source, so it could be a few seconds for this command to complete.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ pyenv install 3.10.2
&lt;/code>&lt;/pre>&lt;h4 id="uninstall">&lt;code>uninstall&lt;/code>&lt;/h4>
&lt;p>Uninstall a specific Python version.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ pyenv uninstall 3.10.2
&lt;/code>&lt;/pre>&lt;h4 id="versions">&lt;code>versions&lt;/code>&lt;/h4>
&lt;p>List all Python versions available to pyenv.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ pyenv versions
system
* 3.10.2 (set by /Users/&amp;lt;user&amp;gt;/.pyenv/version)
&lt;/code>&lt;/pre>&lt;p>Notice that there is a &lt;code>*&lt;/code> indicating what is the active version of Python and it tells you how &lt;code>pyenv&lt;/code> decided to use that version.&lt;/p>
&lt;h4 id="global">&lt;code>global&lt;/code>&lt;/h4>
&lt;p>Set or show the global Python version.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ pyenv global
system
$ pyenv global 3.10.2
$ pyenv global
3.10.2
$ python -V
Python 3.10.2
&lt;/code>&lt;/pre>&lt;p>This will update the &lt;code>/Users/&amp;lt;user&amp;gt;/.pyenv/version&lt;/code> file.&lt;/p>
&lt;h4 id="local">&lt;code>local&lt;/code>&lt;/h4>
&lt;p>Set or show the local application-specific Python version.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ pyenv local
pyenv: no local version configured for this directory
$ pyenv local 3.10.2
$ pyenv local
3.10.2
$ python -V
Python 3.10.2
&lt;/code>&lt;/pre>&lt;p>This will create or update the &lt;code>.python-version&lt;/code> file in the current directory.&lt;/p>
&lt;h4 id="shell">&lt;code>shell&lt;/code>&lt;/h4>
&lt;p>Set or show the shell-specific Python version.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ pyenv shell
pyenv: no shell-specific version configured
$ pyenv shell 3.10.2
$ pyenv shell
3.10.2
$ python -V
Python 3.10.2
&lt;/code>&lt;/pre>&lt;p>This will set the &lt;code>$PYENV_VERSION&lt;/code> environment variable.&lt;/p>
&lt;h4 id="virtualenv">&lt;code>virtualenv&lt;/code>&lt;/h4>
&lt;p>Creates a Python virtualenv in the &lt;code>pyenv&lt;/code> root directory.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ pyenv virtualenv [version] &amp;lt;name&amp;gt;
&lt;/code>&lt;/pre>&lt;p>If no version number is given, the current active version will be used. You can name the virtualenv whatever you want, but it is best practice to name it the same as the relevant project.&lt;/p>
&lt;h4 id="virtualenv-delete">&lt;code>virtualenv-delete&lt;/code>&lt;/h4>
&lt;p>Uninstall a specific Python virtualenv.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ pyenv virtualenv-delete &amp;lt;name&amp;gt;
&lt;/code>&lt;/pre>&lt;h4 id="virtualenvs">&lt;code>virtualenvs&lt;/code>&lt;/h4>
&lt;p>List all Python virtualenvs.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ pyenv virtualenv project
$ pyenv virtualenvs
3.10.2/envs/project (created from /Users/&amp;lt;user&amp;gt;/.pyenv/versions/3.10.2)
project (created from /Users/&amp;lt;user&amp;gt;/.pyenv/versions/3.10.2)
&lt;/code>&lt;/pre>&lt;p>You will see two entries per virutalenv (&lt;code>pyenv versions&lt;/code> does the same thing). In this example, &lt;code>3.10.2/envs/project&lt;/code> is the actual virtualenv and &lt;code>project&lt;/code> is a shorthand simlink to that folder.&lt;/p>
&lt;p>Once a vitualenv is created, we can use it along with the &lt;code>global&lt;/code>, &lt;code>local&lt;/code>, and &lt;code>shell&lt;/code> commands!&lt;/p>
&lt;pre tabindex="0">&lt;code>$ pyenv local project
$ pyenv local
project
&lt;/code>&lt;/pre>&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>I hope by reading this post you see how useful having a version manager like &lt;code>pyenv&lt;/code> can be and were able to get up and running quickly. I know I sure have!&lt;/p>
&lt;p>If you have any feedback, click the button below. I&amp;rsquo;d love to hear from you!&lt;/p></description></item><item><title>Immune Part 1: Meet Your Immune System</title><link>http://www.djpeacher.com/posts/immune-part-1/</link><pubDate>Wed, 23 Feb 2022 00:00:00 +0000</pubDate><guid>http://www.djpeacher.com/posts/immune-part-1/</guid><description>&lt;div class="notice">
If you’d like to read the whole thing yourself and support the author, you can buy the book (not affiliated): &lt;a href="https://sites.prh.com/immune">https://sites.prh.com/immune&lt;/a>
&lt;/div>
&lt;h2 id="what-is-the-immune-system">What is the Immune System?&lt;/h2>
&lt;p>3.5 billion years ago, cells figured out how to gather resources by leeching off of other cells. 541 million years ago,
multicellular life formed and developed systems to defend against intruders. While we can’t directly analyze ancient
immune systems, we can study it via the tree of life. The farther separated two creatures are on the tree and still
share the same trait, the older the trait must generally be.&lt;/p>
&lt;p>Modern animals are the height of the immune system development which at its core is a tool to distinguish the &lt;strong>other&lt;/strong>
from the &lt;strong>self&lt;/strong>. While distinguishing the other from the self is the &lt;em>core&lt;/em>, it is not the &lt;em>goal&lt;/em>. Its overall goal is
to achieve &lt;em>homeostasis&lt;/em>, what we call health.&lt;/p>
&lt;p>Ultimately the battle to stay healthy is futile and will be lost in the end, but our immune system fights to keep us
going a little bit longer. Our immune system can also go wrong and be corrupted. When tricked, it can help spread
diseases, protect cancer cells, cause allergies, and even get confused and deceive the body itself is the enemy. When
too enthusiastic, it can cause unpleasant systems while it’s doing its job and can even cause death.&lt;/p>
&lt;h2 id="what-is-there-to-defend">What Is There to Defend?&lt;/h2>
&lt;p>Immune cells are tasked with protecting the ~40 trillion cells in your body. Most threats are stopped by the skin, but
intruders can still enter via your mucus membranes: windpipe, lungs, eyelids, mouth, nose, stomach, intestines,
reproductive traces, and bladder.&lt;/p>
&lt;h2 id="what-are-your-cells">What Are Your Cells?&lt;/h2>
&lt;p>Cells are the smallest units of life that we can clearly identify. Generally, something is alive if it separates itself
from the universe around it, has a metabolism (intakes outside resources and expels inside garbage), responds to
stimuli, grows, and can make more of itself. Cells are not conscious, have free will, or feelings. They are essentially
biological robots. Cells have various “organs” inside them called organelles. These organs are surrounded by millions of
molecules. Half of which are water molecules and other half consists of 1k-10k different kinds of proteins.&lt;/p>
&lt;p>Proteins are the most fundamental organic building blocks and can be used for basically everything, from sending
signals, constructing simple wall/structures to complex micromachines. Proteins are made from chains of amino acids
(organic building blocks that come in 20 different varieties). A typical protein has 50-2000 amino acids (30k is largest
known). There are billions of billions of possible proteins, but only 1-million to 1-billion useful ones. Your cells
know which proteins to make thanks to the instructions on your DNA.&lt;/p>
&lt;p>About 1% of your DNA is made up of building manuals for proteins. The rest is responsible for regulating which proteins
are built when and how and how many of them at which time. Instructions on DNA are converted into proteins in a two-step
process: 1. Special proteins read DNA and covers it into messenger molecules call mRNA (the language DNA uses to
communicate orders). 2. The mRNA is then taken from the nucleus to the proteus production center called the ribosome.
Here, mRNA is read and translated into amino acids that are put together in the order they arrived.&lt;/p>
&lt;p>In the world of proteins, shape is everything. Their shapes determine what they can and can’t do. A proteins shape is
determined by the amino acids it has and their sequence. As a protein is built, the chain folds together into a specific
shape. Proteins work by interacting with each other in very complex ways. They move and interact by wiggling really
fast. Because of their scale they behave very different compared to a human scale and can in theory move up to 5m/s if
they were not surrounded by other molecules. This motion is called Brownian motion and is why water is so important for
cells and leads to biological pathways.&lt;/p>
&lt;p>Biological pathways is a fancy word to describe a series of interactions between individual things that lead to a change
in a cell. A proteins specific shape enable them to fit together or interact with other proteins in specific ways.
Sequences of these interactions, called pathways, cause cells to do things. An individual cell is pretty dump, but many
cells working are pretty smart. The phenomenon occurs in many places in nature and is called emergence. It is the
observation that the whole has properties and abilities that the parts do not have.&lt;/p>
&lt;h2 id="the-empires-and-kingdoms-of-the-immune-system">The Empires and Kingdoms of the Immune System&lt;/h2>
&lt;p>Your Immune System consists of two major realms: Innate and Adaptive Immunity.&lt;/p>
&lt;p>Your Innate Immune System is ready to fight after birth, and can identify if an enemy is not self, but other. It does
the down-and-dirty hand-to-hand combat, but it also determines what broad category your enemies fall in and how
dangerous they are. And finally it has the power to activate your second line of defense:&lt;/p>
&lt;p>Your Adaptive Immune System, which needs a few years before it is ready to deploy efficiently. It is specific and can
draw from an incredibly large library to fight every possible individual enemy that nature can throw at it, with
powerful super weapons. But while it is powerful, one of its most important jobs is to make the Innate Immune System
even stronger.&lt;/p></description></item><item><title>What Am I?</title><link>http://www.djpeacher.com/posts/what-am-i/</link><pubDate>Tue, 22 Feb 2022 00:00:00 +0000</pubDate><guid>http://www.djpeacher.com/posts/what-am-i/</guid><description>&lt;p>I am someone who generally writes code using web-based technologies. What am I? This question has bugged me for years and I think I&amp;rsquo;ve finally come to a conclusion.&lt;/p>
&lt;p>If you like spoilers, look at my &lt;a href="http://www.djpeacher.com/">home page&lt;/a> or the &lt;a href="#okay-so-what-am-i">conclusion&lt;/a> below. If not, here is my breakdown. Keep in mind that there exists many more titles than I mention below, but I am just trying to focus on my field. This is also just based on what I&amp;rsquo;ve been exposed to and I am happy to be proven wrong.&lt;/p>
&lt;p>So what am I? Let&amp;rsquo;s start at the beginning&amp;hellip;&lt;/p>
&lt;h2 id="programmercoder">Programmer/Coder&lt;/h2>
&lt;p>I am 100% a programmer and a coder. Those two words essentially mean the same thing. I write programs with code.&lt;/p>
&lt;p>While I think all other titles fall under this category, I do not consider it a job title. It&amp;rsquo;s just too generic to represent an occupation.&lt;/p>
&lt;h2 id="software-engineer-vs-software-developer">Software Engineer vs. Software Developer&lt;/h2>
&lt;p>Going a level deeper, we find Software Engineers and Software Developers. As far as I can tell, both of these mean the same thing, and the word &amp;ldquo;Software&amp;rdquo; is optional. These titles represent anyone who designs and creates systems to solve problems.&lt;/p>
&lt;p>So I am a [Software] Engineer/Developer?&lt;/p>
&lt;h2 id="web-vs-mobile-vs-desktop">Web vs. Mobile vs. Desktop&lt;/h2>
&lt;p>Well, we can go another layer deeper and specialize in web, mobile, or desktop applications which produces these lovely titles:&lt;/p>
&lt;ul>
&lt;li>Web [Software] Engineer/Developer&lt;/li>
&lt;li>Mobile [Software] Engineer/Developer&lt;/li>
&lt;li>Desktop [Software] Engineer/Developer&lt;/li>
&lt;/ul>
&lt;p>They all do the same thing, just in their respective specialization.&lt;/p>
&lt;p>So am I any of these? Well yes, I primarily specialize in the web, but with tools like React Native, Expo, and Electron, those lines are beginning to blur.&lt;/p>
&lt;h2 id="full-stack-vs-backend-vs-frontend">Full-Stack vs. Backend vs. Frontend&lt;/h2>
&lt;p>Unfortunately, we can go yet another layer deeper and specialize in the frontend, backend, or even both layers of an application, thus producing even more titles:&lt;/p>
&lt;ul>
&lt;li>Full-Stack [Web/Software] Engineer/Developer&lt;/li>
&lt;li>Backend [Web/Software] Engineer/Developer&lt;/li>
&lt;li>Frontend/UI [Web/Software] Engineer/Developer&lt;/li>
&lt;/ul>
&lt;p>These terms primarily get used in web environments (which is why I wrote &amp;ldquo;Web/Software&amp;rdquo;), but they could also apply to mobile and desktop.&lt;/p>
&lt;p>This one is easy for me. I work across the entire stack, so I must be a Full-Stack [Web/Software] Engineer/Developer?&lt;/p>
&lt;h2 id="okay-so-what-am-i">Okay, so what am I?&lt;/h2>
&lt;p>I am someone who designs and creates systems to solve problems on the web across both the frontend and backend. And thanks to cross-platform technologies, it has never been easier for me to take my web development skills and port them over to mobile and desktop environments. Based on this description, the best titles for me are:&lt;/p>
&lt;ul>
&lt;li>Engineer&lt;/li>
&lt;li>Developer&lt;/li>
&lt;li>Software Engineer&lt;/li>
&lt;li>Software Developer&lt;/li>
&lt;/ul>
&lt;p>All these titles encompass what I currently do and where my capabilities lie. I work across the stack, primarily in web environments, but depending on the technologies I could port those skills over to mobile and desktop. That said, I could see some ambiguity if I just used Engineer or Developer. So we are down to two:&lt;/p>
&lt;ul>
&lt;li>Software Engineer&lt;/li>
&lt;li>Software Developer&lt;/li>
&lt;/ul>
&lt;p>At this point, it just comes down to personal preference, so just because it sounds cooler&amp;hellip;&lt;/p>
&lt;p>I am a &lt;strong>Software Engineer&lt;/strong>!&lt;/p>
&lt;p>Here is a title breakdown:&lt;/p>
&lt;pre tabindex="0">&lt;code>- Programmer/Coder
+ [Software] Engineer/Developer
- Web [Software] Engineer/Developer
+ Full-Stack [Web/Software] Engineer/Developer
+ Backend [Web/Software] Engineer/Developer
+ Frontend/UI [Web/Software] Engineer/Developer
- Mobile [Software] Engineer/Developer
- Desktop [Software] Engineer/Developer
&lt;/code>&lt;/pre>&lt;h2 id="further-reading">Further Reading&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=2GonoPx9DgU">The Difference Between A Software Engineer And A Software Developer&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=ys7V9JSTE5A">What does &amp;ldquo;Senior&amp;rdquo; Software Engineer mean?&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>New Computer Who Dis?</title><link>http://www.djpeacher.com/posts/new-computer-who-dis/</link><pubDate>Mon, 21 Feb 2022 00:00:00 +0000</pubDate><guid>http://www.djpeacher.com/posts/new-computer-who-dis/</guid><description>&lt;h2 id="install">Install&lt;/h2>
&lt;p>&lt;strong>Command Line Tools&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>xcode-select --install
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Oh My Zsh&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>sh -c &amp;#34;$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&amp;#34;
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Homebrew&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>/bin/bash -c &amp;#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&amp;#34;
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>&lt;a href="https://github.com/pyenv/pyenv/wiki">pyenv&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://formulae.brew.sh/formula/node#default">node&lt;/a> (need to consider a package manager)&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Applications&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://code.visualstudio.com/download">Visual Studio Code&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.docker.com/get-docker/">Docker&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://apps.apple.com/us/app/1password-7-password-manager/id1333542190?mt=12">1Password&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://apps.apple.com/us/app/things-3/id904280696?mt=12">Things 3&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://bjango.com/mac/istatmenus/">iStat Menus 6&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://apps.apple.com/us/app/magnet/id441258766?mt=12">Magnet&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://apps.apple.com/us/app/bandwidth/id490461369?mt=12">Bandwidth+&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://apps.apple.com/us/app/progress-bar/id1441939775?mt=12">Progress&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>