<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Jonathan Peacher</title><link>https://www.djpeacher.com/posts/</link><description>Recent content in Posts on Jonathan Peacher</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>All work licensed under CC BY-SA 4.0 unless otherwise stated.</copyright><lastBuildDate>Wed, 21 Jun 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://www.djpeacher.com/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Deploy Django with DigitalOcean App Platform</title><link>https://www.djpeacher.com/posts/deploy-django-with-digitalocean-app-platform/</link><pubDate>Wed, 21 Jun 2023 00:00:00 +0000</pubDate><guid>https://www.djpeacher.com/posts/deploy-django-with-digitalocean-app-platform/</guid><description>
&lt;p>I&amp;rsquo;ve tried a variety of different ways to deploy Django projects over the last five years, and they all seem a bit overcomplicated. I would very much like to focus less on the infrastructure part of web development, and more on making cool stuff, particularly with Django. To that end, I&amp;rsquo;ve been looking for a simple&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> and cheap&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup> way to throw a Django projects onto the internet, and I think DigitalOcean&amp;rsquo;s &lt;a href="https://www.digitalocean.com/products/app-platform">App Platform&lt;/a> is the best I&amp;rsquo;ve found so far.&lt;/p>
&lt;p>The rest of this post is based&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup> on &lt;a href="https://docs.digitalocean.com/tutorials/app-deploy-django-app/">DigitalOcean&amp;rsquo;s tutorial&lt;/a>, but stripped down for anyone who just wants a TLDR on how to chuck a Django project&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup> onto the interwebs!&lt;/p>
&lt;h2 id="step-1-install-python-packages">Step 1: Install Python Packages&lt;/h2>
&lt;pre tabindex="0">&lt;code>pip install django gunicorn psycopg2-binary dj-database-url
pip freeze &amp;gt; requirements.txt
&lt;/code>&lt;/pre>&lt;h2 id="step-2-update-settingspy">Step 2: Update &lt;code>settings.py&lt;/code>&lt;/h2>
&lt;pre tabindex="0">&lt;code>import os
import sys
import dj_database_url
SECRET_KEY = os.getenv(&amp;#34;DJANGO_SECRET_KEY&amp;#34;, &amp;#39;django-insecure-xyz&amp;#39;)
ALLOWED_HOSTS = os.getenv(&amp;#34;DJANGO_ALLOWED_HOSTS&amp;#34;, &amp;#34;127.0.0.1,localhost&amp;#34;).split(&amp;#34;,&amp;#34;)
ADMIN_URL = os.getenv(&amp;#34;ADMIN_URL&amp;#34;, &amp;#34;admin/&amp;#34;)
SECURE_HSTS_SECONDS = 31536000
if DEBUG is True:
DATABASES = {
&amp;#34;default&amp;#34;: {
&amp;#34;ENGINE&amp;#34;: &amp;#34;django.db.backends.sqlite3&amp;#34;,
&amp;#34;NAME&amp;#34;: os.path.join(BASE_DIR, &amp;#34;db.sqlite3&amp;#34;),
}
}
elif len(sys.argv) &amp;gt; 0 and sys.argv[1] != &amp;#39;collectstatic&amp;#39;:
if os.getenv(&amp;#34;DATABASE_URL&amp;#34;, None) is None:
raise Exception(&amp;#34;DATABASE_URL environment variable not defined&amp;#34;)
DATABASES = {
&amp;#34;default&amp;#34;: dj_database_url.parse(os.environ.get(&amp;#34;DATABASE_URL&amp;#34;)),
}
STATIC_URL = &amp;#34;/static/&amp;#34;
STATIC_ROOT = os.path.join(BASE_DIR, &amp;#34;staticfiles&amp;#34;)
&lt;/code>&lt;/pre>&lt;h2 id="step-3-deploy-on-app-platform">Step 3: Deploy on App Platform&lt;/h2>
&lt;p>Navigate to the &lt;a href="https://cloud.digitalocean.com/apps">App Platform&lt;/a>&lt;sup id="fnref:5">&lt;a href="#fn:5" class="footnote-ref" role="doc-noteref">5&lt;/a>&lt;/sup>.&lt;/p>
&lt;h3 id="create-app">Create App&lt;/h3>
&lt;ol>
&lt;li>Create App → Select Repo → Select Branch&lt;/li>
&lt;li>Check &amp;ldquo;Autodeploy&amp;rdquo;&lt;/li>
&lt;/ol>
&lt;h3 id="resources">Resources&lt;/h3>
&lt;h4 id="web-service">Web Service&lt;/h4>
&lt;ol>
&lt;li>Edit Plan → Select &amp;ldquo;Basic&amp;rdquo; → Select &amp;ldquo;$5.00/mo &amp;ndash; Basic&amp;rdquo; → Back&lt;/li>
&lt;li>Edit Web Service → Edit Run Command → Save&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code>gunicorn --worker-tmp-dir /dev/shm &amp;lt;YOUR_PROJECT_NAME&amp;gt;.wsgi
&lt;/code>&lt;/pre>&lt;h4 id="database">Database&lt;/h4>
&lt;ol>
&lt;li>Add Resource → Database → Add&lt;/li>
&lt;li>Create and Attach&lt;/li>
&lt;/ol>
&lt;h4 id="static-site">Static Site&lt;/h4>
&lt;ol>
&lt;li>Add Resource → Detect from Source Code → Add&lt;/li>
&lt;li>Select Provider → Select Repo/Branch → Check &amp;ldquo;Autodeploy&amp;rdquo; → Next&lt;/li>
&lt;li>Edit new Web Service&lt;/li>
&lt;li>Rename to &lt;code>&amp;lt;PROJECT&amp;gt;-static&lt;/code> → Save&lt;/li>
&lt;li>Update &amp;ldquo;Resource Type&amp;rdquo; to &amp;ldquo;Static Site&amp;rdquo; → Save&lt;/li>
&lt;li>Update &amp;ldquo;Output Directory&amp;rdquo; to &lt;code>staticfiles&lt;/code> → Save&lt;/li>
&lt;li>Update &amp;ldquo;HTTP Request Routes&amp;rdquo; to &lt;code>/static&lt;/code> → Save&lt;/li>
&lt;/ol>
&lt;h3 id="environment-variables">Environment Variables&lt;/h3>
&lt;ol>
&lt;li>Edit Web Service resource&lt;/li>
&lt;li>Add the following environment variables:&lt;/li>
&lt;/ol>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key&lt;/th>
&lt;th>Value&lt;/th>
&lt;th style="text-align:center">Encrypt&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>DATABASE_URL&lt;/td>
&lt;td>${db.DATABASE_URL}&lt;/td>
&lt;td style="text-align:center">N&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>DJANGO_ALLOWED_HOSTS&lt;/td>
&lt;td>${APP_DOMAIN}&lt;/td>
&lt;td style="text-align:center">N&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>DEBUG&lt;/td>
&lt;td>False&lt;/td>
&lt;td style="text-align:center">N&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ADMIN_URL&lt;/td>
&lt;td>your-secret-admin/&lt;/td>
&lt;td style="text-align:center">N&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>DJANGO_SECRET_KEY&lt;/td>
&lt;td>your-secret-key&lt;/td>
&lt;td style="text-align:center">Y&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ol start="3">
&lt;li>Save&lt;/li>
&lt;/ol>
&lt;h3 id="info">Info&lt;/h3>
&lt;ol>
&lt;li>Rename project, if desired → Save&lt;/li>
&lt;/ol>
&lt;h3 id="review">Review&lt;/h3>
&lt;ol>
&lt;li>Click &amp;ldquo;Create Resources&amp;rdquo;&lt;/li>
&lt;/ol>
&lt;h3 id="post-deploy">Post Deploy&lt;/h3>
&lt;ol>
&lt;li>Navigate to &amp;ldquo;Console&amp;rdquo; tab&lt;/li>
&lt;li>Run the following commands:&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code>python manage.py migrate
python manage.py createsuperuser
&lt;/code>&lt;/pre>&lt;hr>
&lt;p>That it, your Django project should now be live! 🚀 Hopefully I laid that out as simply as possible, but feel free to checkout out &lt;a href="https://docs.digitalocean.com/tutorials/app-deploy-django-app/">DigitalOcean&amp;rsquo;s tutorial&lt;/a> if you&amp;rsquo;d like more detail.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>I wish it could be simpler, but this is the best I got so far.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>Basic plans start around $12/mo.&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3">
&lt;p>I made a few improvements like adding &lt;code>ADMIN_URL&lt;/code> and &lt;code>SECURE_HSTS_SECONDS&lt;/code> to achieve a 100% score on &lt;a href="https://djcheckup.com/">djcheckup.com&lt;/a>.&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4">
&lt;p>Assumption: You have a &lt;em>simple&lt;/em> Django project.&amp;#160;&lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:5">
&lt;p>Assumption: You have committed the project to a git repo and have a DigitalOcean account.&amp;#160;&lt;a href="#fnref:5" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div><a href="mailto: reply@djpeacher.com?subject=Re:%20Deploy%20Django%20with%20DigitalOcean%20App%20Platform">Reply via email</a></description></item><item><title>Why My Dockerfile ARG Was Missing</title><link>https://www.djpeacher.com/posts/why-my-dockerfile-arg-was-missing/</link><pubDate>Tue, 13 Jun 2023 00:00:00 +0000</pubDate><guid>https://www.djpeacher.com/posts/why-my-dockerfile-arg-was-missing/</guid><description>
&lt;p>I was doing some cleanup in a Dockerfile today when I noticed one of the packages was not on the correct version. It was on the latest version despite the fact there was an &lt;code>ARG&lt;/code> pinning it&amp;hellip;or so I thought. After some sleuthing, I found this helpful &lt;a href="https://stackoverflow.com/a/56748289">Stack Overflow post&lt;/a> that explained and pointed me in the &lt;a href="https://docs.docker.com/engine/reference/builder/#understand-how-arg-and-from-interact">right direction&lt;/a>.&lt;/p>
&lt;p>Turns out&amp;hellip;&lt;/p>
&lt;blockquote>
&lt;p>&amp;ldquo;An &lt;code>ARG&lt;/code> declared before a &lt;code>FROM&lt;/code>&amp;hellip;can’t be used in any instruction after a &lt;code>FROM&lt;/code>.&amp;rdquo;&lt;/p>
&lt;/blockquote>
&lt;p>So the reason my package was installing the latest version was because the &lt;code>ARG&lt;/code> didn&amp;rsquo;t exist! Conveniently, it also didn&amp;rsquo;t error, which is why it went unnoticed 🙃&lt;/p>
&lt;p>The solution? Move the &lt;code>ARG&lt;/code> down one line after the &lt;code>FROM&lt;/code>.&lt;/p>
&lt;pre tabindex="0">&lt;code># Bad
ARG VERSION=1.2.3
FROM ...
# Good
FROM ...
ARG VERSION=1.2.3
&lt;/code>&lt;/pre><a href="mailto: reply@djpeacher.com?subject=Re:%20Why%20My%20Dockerfile%20ARG%20Was%20Missing">Reply via email</a></description></item><item><title>PyTexas 2023: Day 2</title><link>https://www.djpeacher.com/posts/pytexas-23-day-2/</link><pubDate>Sun, 02 Apr 2023 00:00:00 +0000</pubDate><guid>https://www.djpeacher.com/posts/pytexas-23-day-2/</guid><description>
&lt;h2 id="keynote-full-stack-pythonhttpswwwpytexasorgschedulekeynotesandrew-pandy-knight">&lt;a href="https://www.pytexas.org/schedule/keynotes#andrew-pandy-knight">Keynote: Full-Stack Python&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Python is the &lt;del>second&lt;/del> best language for [doing] everything [together].&lt;/li>
&lt;li>&lt;strong>Simple&lt;/strong> is better than &lt;strong>complex&lt;/strong>.&lt;/li>
&lt;li>&lt;strong>Python&lt;/strong> transforms us from &lt;strong>programmers&lt;/strong> into &lt;strong>problem solvers&lt;/strong>.&lt;/li>
&lt;li>Aside from HTML/CSS, the entire stack can be built with Python!&lt;/li>
&lt;li>HTMX 😍&lt;/li>
&lt;/ul>
&lt;h2 id="unlocking-the-power-of-health-data-an-introduction-to-fhir-and-pythonhttpswwwpytexasorgscheduletalksunlocking-the-power-of-health-data-an-introduction-to-fhir-and-python">&lt;a href="https://www.pytexas.org/schedule/talks#unlocking-the-power-of-health-data-an-introduction-to-fhir-and-python">Unlocking the Power of Health Data: An Introduction to FHIR and Python&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Healthcare coordination is a mess, with no interoperability.&lt;/li>
&lt;li>Enter the Electronic Health Record, but it had low adoption because it was only a syntactic protocol.&lt;/li>
&lt;li>Enter HL7FHIR which was syntactic, semantic, and even had an API scheme.&lt;/li>
&lt;/ul>
&lt;h2 id="having-fun-with-application-designhttpswwwpytexasorgscheduletalkshaving-fun-with-application-design">&lt;a href="https://www.pytexas.org/schedule/talks#having-fun-with-application-design">Having fun with application design&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>Empathize&lt;/strong> &amp;ndash; Curiosity about your users.&lt;/li>
&lt;li>&lt;strong>Define&lt;/strong> &amp;ndash; Understand a problem.&lt;/li>
&lt;li>&lt;strong>Ideate&lt;/strong> &amp;ndash; Creativity in idea generation.&lt;/li>
&lt;li>&lt;strong>Prototype&lt;/strong> &amp;ndash; Build the right thing.&lt;/li>
&lt;li>&lt;strong>Test&lt;/strong> your assumptions.&lt;/li>
&lt;/ul>
&lt;h2 id="how-to-build-and-ship-more-secure-python-apps-with-sigstorehttpswwwpytexasorgscheduletalkshow-to-build-and-ship-more-secure-python-apps-with-sigstore">&lt;a href="https://www.pytexas.org/schedule/talks#how-to-build-and-ship-more-secure-python-apps-with-sigstore">How to Build and Ship More Secure Python Apps with Sigstore&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>You wouldn&amp;rsquo;t pickup and chew gum (FOSS) from a wall would you? Would you!?&lt;/li>
&lt;li>Attacks on FOSS are increasing, and Sigstore hopes to fix this.&lt;/li>
&lt;li>&lt;a href="https://ttl.sh/">ttl.sh&lt;/a>, an anonymous and ephemeral Docker image registry.&lt;/li>
&lt;/ul>
&lt;h2 id="holoviz-visualization-and-interactive-dashboards-in-pythonhttpswwwpytexasorgscheduletalksholoviz-visualization-and-interactive-dashboards-in-python">&lt;a href="https://www.pytexas.org/schedule/talks#holoviz-visualization-and-interactive-dashboards-in-python">HoloViz: Visualization and Interactive Dashboards in Python&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://holoviz.org/">HoloViz&lt;/a>, a framework for developing data visualization dashboards.&lt;/li>
&lt;/ul>
&lt;h2 id="put-your-pants-on-and-lint-all-your-python-codehttpswwwpytexasorgscheduletalksput-your-pants-on-and-lint-all-your-python-code">&lt;a href="https://www.pytexas.org/schedule/talks#put-your-pants-on-and-lint-all-your-python-code">Put your Pants on and lint all your Python code!&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://www.pantsbuild.org/">Pants&lt;/a>, a fast, scalable, user-friendly build and developer workflow.&lt;/li>
&lt;li>&lt;a href="https://beta.ruff.rs/docs/">Ruff&lt;/a>, an extremely fast Python linter.&lt;/li>
&lt;/ul>
&lt;h2 id="using-python-for-digital-investigationshttpswwwpytexasorgscheduletalksusing-python-for-digital-investigations">&lt;a href="https://www.pytexas.org/schedule/talks#using-python-for-digital-investigations">Using Python for Digital Investigations&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Digital Investigations (open-source research), research that uses info that is publicly available.&lt;/li>
&lt;li>Research sources include public geospatial, media, user-generated, and archive data.&lt;/li>
&lt;li>Open-source research and software have similar names, different histories, and both use Python as their language of choice.&lt;/li>
&lt;/ul>
&lt;h2 id="lightning-talks">Lightning Talks&lt;/h2>
&lt;ul>
&lt;li>Schools, when compared to industry, focus on code instead of other import aspects like tests, documentation, and collaboration.&lt;/li>
&lt;li>Book Recommendations
&lt;ul>
&lt;li>Being Geek: The Software Developer&amp;rsquo;s Career Handbook&lt;/li>
&lt;li>A Philosophy of Software Design&lt;/li>
&lt;li>Think Like a Programmer: An Introduction to Creative Problem Solving&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Single click to select by character, double click to select by word, triple click to select by line!&lt;/li>
&lt;/ul><a href="mailto: reply@djpeacher.com?subject=Re:%20PyTexas%202023%3a%20Day%202">Reply via email</a></description></item><item><title>PyTexas 2023: Day 1</title><link>https://www.djpeacher.com/posts/pytexas-23-day-1/</link><pubDate>Sat, 01 Apr 2023 00:00:00 +0000</pubDate><guid>https://www.djpeacher.com/posts/pytexas-23-day-1/</guid><description>
&lt;h2 id="keynote-walking-the-linehttpswwwpytexasorgschedulekeynotesbrandon-rhodes">&lt;a href="https://www.pytexas.org/schedule/keynotes#brandon-rhodes">Keynote: Walking the Line&lt;/a>&lt;/h2>
&lt;p>&lt;em>Amazing keynote, and I will definitely watch it again when it&amp;rsquo;s uploaded to YouTube!&lt;/em>&lt;/p>
&lt;ul>
&lt;li>Make small, incremental, and easy to understand changes.&lt;/li>
&lt;li>Test often and fail quickly.&lt;/li>
&lt;li>Orient yourself by checking an expected failure.&lt;/li>
&lt;/ul>
&lt;h2 id="a-tale-of-two-typingshttpswwwpytexasorgscheduletalksa-tale-of-two-typings">&lt;a href="https://www.pytexas.org/schedule/talks#a-tale-of-two-typings">A Tale of Two Typings&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Legacy code is simply code without &lt;del>tests&lt;/del> types.&lt;/li>
&lt;li>Define your types, don&amp;rsquo;t just inline them.&lt;/li>
&lt;/ul>
&lt;h2 id="trust-fall-hidden-gems-in-mlflow-that-improve-model-credibilityhttpswwwpytexasorgscheduletalkstrust-fall-hidden-gems-in-mlflow-that-improve-model-credibility">&lt;a href="https://www.pytexas.org/schedule/talks#trust-fall-hidden-gems-in-mlflow-that-improve-model-credibility">Trust Fall: Hidden Gems in MLFlow that Improve Model Credibility&lt;/a>&lt;/h2>
&lt;p>&lt;em>The talk focused on machine learning, but I think this can still apply outside of that.&lt;/em>&lt;/p>
&lt;ul>
&lt;li>Build trust through documentation and reproducibility.&lt;/li>
&lt;/ul>
&lt;h2 id="exploring-socio-technical-security-concerns-in-critical-open-source-python-repositorieshttpswwwpytexasorgscheduletalksexploring-socio-technical-security-concerns-in-critical-open-source-python-repositories">&lt;a href="https://www.pytexas.org/schedule/talks#exploring-socio-technical-security-concerns-in-critical-open-source-python-repositories">Exploring Socio-technical Security Concerns in Critical Open-source Python Repositories&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Catalyst: Someone intentionally introduced bad code into Linux for a research paper.&lt;/li>
&lt;li>Pull requests power open source contributions.&lt;/li>
&lt;li>FOSS needs to be careful what gets merged in.&lt;/li>
&lt;/ul>
&lt;h2 id="a-buildengineer-in-a-buildless-langhttpswwwpytexasorgscheduletalksa-buildengineer-in-a-buildless-lang">&lt;a href="https://www.pytexas.org/schedule/talks#a-buildengineer-in-a-buildless-lang">A BuildEngineer in a buildless lang&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Improve development by reducing stylistic diffs and increasing semantic diffs.&lt;/li>
&lt;/ul>
&lt;h2 id="recursion-for-beginners-a-beginners-guide-to-recursionhttpswwwpytexasorgscheduletalksrecursion-for-beginners-a-beginners-guide-to-recursion">&lt;a href="https://www.pytexas.org/schedule/talks#recursion-for-beginners-a-beginners-guide-to-recursion">Recursion for Beginners: A Beginner&amp;rsquo;s Guide to Recursion&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>All recursive solutions have an iterative solution.&lt;/li>
&lt;li>Unless you are dealing with trees, avoid recursion.&lt;/li>
&lt;/ul>
&lt;h2 id="improving-code-without-losing-your-mindhttpswwwpytexasorgscheduletalksimproving-code-without-losing-your-mind">&lt;a href="https://www.pytexas.org/schedule/talks#improving-code-without-losing-your-mind">Improving code without losing your mind&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://blog.alexewerlof.com/p/tech-debt-day/">https://blog.alexewerlof.com/p/tech-debt-day/&lt;/a>&lt;/li>
&lt;li>We tend to focus on getting features out the door.&lt;/li>
&lt;li>Like an artist, programmers should improve &amp;ndash; refactor &amp;ndash; their art.&lt;/li>
&lt;li>Set aside time to improve &amp;ndash; refactor &amp;ndash; your code.&lt;/li>
&lt;li>Make code understandable and obvious.&lt;/li>
&lt;/ul>
&lt;h2 id="lightning-talks">Lightning Talks&lt;/h2>
&lt;ul>
&lt;li>Make code obvious. Otherwise, make it familiar. Otherwise, make it well-documented. Start by making it obvious!&lt;/li>
&lt;li>For demos/testing, you can &lt;code>pip install&lt;/code> packages directly inside of the Python Interpreter!&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#f92672">import&lt;/span> pip
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;gt;&amp;gt;&amp;gt;&lt;/span> pip&lt;span style="color:#f92672">.&lt;/span>main([&lt;span style="color:#e6db74">&amp;#34;install&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;django&amp;#34;&lt;/span>])
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div><a href="mailto: reply@djpeacher.com?subject=Re:%20PyTexas%202023%3a%20Day%201">Reply via email</a></description></item><item><title>Multiple Monitors on Apple Silicon</title><link>https://www.djpeacher.com/posts/multiple-monitors-on-apple-silicon/</link><pubDate>Mon, 30 Jan 2023 00:00:00 +0000</pubDate><guid>https://www.djpeacher.com/posts/multiple-monitors-on-apple-silicon/</guid><description>
&lt;p>If you are reading this, you probably just discovered that your second monitor isn&amp;rsquo;t working when you connect it to your M1/M2 Mac. Surprise, those chips have only one video output and thus can only support one external monitor! Bummer&amp;hellip;&lt;/p>
&lt;p>To get around this, and move on with your life, you can use &lt;a href="https://www.synaptics.com/products/displaylink-graphics">DisplayLink&lt;/a> to output extra monitors via USB! Normally, connecting to an external monitor looks something like this:
&lt;script src="https://unpkg.com/mermaid/dist/mermaid.min.js">&lt;/script>
&lt;script>
let isDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
let mermaidConfig = {
theme: (isDark) ? 'dark' : 'default',
};
mermaid.initialize(mermaidConfig);
&lt;/script>
&lt;div class="mermaid">
flowchart LR
Machine -- video --> Monitor
&lt;/div>&lt;/p>
&lt;p>With DisplayLink, that video signal gets compressed and outputted via USB. This data is then decompressed by a &lt;strong>DisplayLink adaptor&lt;/strong> and outputted to the monitor as a video signal. That looks something like this:&lt;/p>
&lt;script src="https://unpkg.com/mermaid/dist/mermaid.min.js">&lt;/script>
&lt;script>
let isDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
let mermaidConfig = {
theme: (isDark) ? 'dark' : 'default',
};
mermaid.initialize(mermaidConfig);
&lt;/script>
&lt;div class="mermaid">
flowchart LR
Machine -- video --> DLS[DL Software] -- compressed --> DLA[DL Adaptor] -- video --> Monitor
&lt;/div>
&lt;p>From my experience using it so far, it works pretty well! I have noticed some minor latency and flickering issues, but that is a small price to pay, I think, for gaining a second monitor.&lt;/p>
&lt;p>So TLDR, to get a second monitor on M1/M2 Mac, you have to:&lt;/p>
&lt;ol>
&lt;li>&lt;a href="https://www.synaptics.com/products/displaylink-graphics/downloads">Install DisplayLink&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://www.synaptics.com/products/displaylink-graphics/displaylink-products-list">Buy a DisplayLink adaptor&lt;/a> that is compatible with your monitor specs.&lt;/li>
&lt;li>Plug and Display! &lt;i class="twa twa-rocket">&lt;/i>&lt;/li>
&lt;/ol><a href="mailto: reply@djpeacher.com?subject=Re:%20Multiple%20Monitors%20on%20Apple%20Silicon">Reply via email</a></description></item><item><title>Alamo Drafthouse 2022</title><link>https://www.djpeacher.com/posts/alamo-drafthouse-2022/</link><pubDate>Wed, 04 Jan 2023 00:00:00 +0000</pubDate><guid>https://www.djpeacher.com/posts/alamo-drafthouse-2022/</guid><description>
&lt;ul>
&lt;li>Puss in Boots: The Last Wish&lt;/li>
&lt;li>Black Panther: Wakanda Forever&lt;/li>
&lt;li>The Whale&lt;/li>
&lt;li>Avatar: The Way of Water&lt;/li>
&lt;li>Bones and All&lt;/li>
&lt;li>Violent Night&lt;/li>
&lt;li>The Menu&lt;/li>
&lt;li>Triangle of Sadness&lt;/li>
&lt;li>Black Adam&lt;/li>
&lt;li>Ticket to Paradise&lt;/li>
&lt;li>Amsterdam&lt;/li>
&lt;li>Pearl&lt;/li>
&lt;li>Howl&amp;rsquo;s Moving Castle &lt;i class="twa twa-ring">&lt;/i>&lt;/li>
&lt;li>Barbarian&lt;/li>
&lt;li>The Invitation&lt;/li>
&lt;li>Three Sound Years of Longing&lt;/li>
&lt;li>Beast&lt;/li>
&lt;li>Bodies Bodies Bodies&lt;/li>
&lt;li>Bullet Train&lt;/li>
&lt;li>Nope&lt;/li>
&lt;li>Thor: Love and Thunder&lt;/li>
&lt;li>The Black Phone&lt;/li>
&lt;li>Star Trek: The Genesis Trilogy &lt;i class="twa twa-rocket">&lt;/i>&lt;/li>
&lt;li>Everything Everywhere All At Once &lt;i class="twa twa-star">&lt;/i>&lt;/li>
&lt;li>Jurassic World Dominion&lt;/li>
&lt;li>Elvis&lt;/li>
&lt;li>Lightyear&lt;/li>
&lt;li>Crimes of the Future&lt;/li>
&lt;li>Men&lt;/li>
&lt;li>Doctor Strange: In the Multiverse of Madness&lt;/li>
&lt;li>Sonic 2&lt;/li>
&lt;/ul><a href="mailto: reply@djpeacher.com?subject=Re:%20Alamo%20Drafthouse%202022">Reply via email</a></description></item><item><title>DjangoCon US 2022: Day 3</title><link>https://www.djpeacher.com/posts/djangocon-us-22-day-3/</link><pubDate>Wed, 19 Oct 2022 00:00:00 +0000</pubDate><guid>https://www.djpeacher.com/posts/djangocon-us-22-day-3/</guid><description>
&lt;h2 id="async-django-the-practical-guide-youve-been-awaiting-forhttps2022djangoconustalksasync-django-the-practical-guide-you-ve">&lt;a href="https://2022.djangocon.us/talks/async-django-the-practical-guide-you-ve/">Async Django: The practical guide you&amp;rsquo;ve been awaiting for.&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Async is exciting, but be aware that using async will make your application more complex.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>import asyncio&lt;/code>: Python&amp;rsquo;s implementation of an async runtime that Django uses.&lt;/p>
&lt;pre tabindex="0">&lt;code>import asyncio
async def foo():
...
await bar()
async def main():
tasks = [asyncio.create_task(foo()) for range(5)]
# Important! Wait for all tasks to complete.
await asyncio.gather(*tasks)
asyncio.run(main())
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>Can you use this for background tasks?&lt;/p>
&lt;ul>
&lt;li>Kind off&amp;hellip;if it fails, there is no built-in statuses, retires, or error handling.&lt;/li>
&lt;li>It depends&amp;hellip;on how you are running Django (WSGI or ASGI). With WSGI, hitting an async view spins up an event loop, but will disappear when then view exits (like the example above).&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Aggregate Views (what you did before GraphQL):&lt;/p>
&lt;pre tabindex="0">&lt;code>import httpx
import asyncio
async def aggregate_view(): # pseudo code
async with httpx.AsyncClient() as client:
response_a, response_b = asyncio.gather(
client.get(view_a_url),
client.get(view_b_url),
)
return JsonResponse({
&amp;#39;response_a&amp;#39;: response_a.json(),
&amp;#39;response_b&amp;#39;: response_b.json(),
})
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>Chat App (four ways):&lt;/p>
&lt;ul>
&lt;li>Polling (HTMX): Simple, but doesn&amp;rsquo;t scale, isn&amp;rsquo;t responsive, and can lead to self DDOS.&lt;/li>
&lt;li>Long Polling (HTMX + Channels): Responsiveness, but creates a lot connections.&lt;/li>
&lt;li>Server-Sent Events (HTMX + Channels): Better, keeps the connection open.&lt;/li>
&lt;li>WebSockets (HTMX + Channels): Also keeps the connection open, but allows two-way communication.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="why-large-django-projects-need-a-data-prefetching-layerhttps2022djangoconustalkswhy-large-django-projects-need-a-data">&lt;a href="https://2022.djangocon.us/talks/why-large-django-projects-need-a-data/">Why large Django projects need a data (prefetching) layer&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&amp;ldquo;DRY isn&amp;rsquo;t helpful if you need to be careful.&amp;rdquo;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Django REST Framework loves DRY, but has high change amplification as a side effect.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Change Amplification: The expected number of places in the codebase that needs to be modified during an atomic change to the software.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>An example of this in DRF is needing to prefetch in serializers.&lt;/p>
&lt;pre tabindex="0">&lt;code>class MovieSerializer(ModelSerializer):
# data that requires prefetching
# You have to remeber to prefetch for each view using MovieSerializer.
class MovieListView(ListAPIView):
queryset = Movie.objects.prefetch_related(&amp;#34;directors&amp;#34;)
serializer_class = MovieSerializer
class MovieDetailView(ListAPIView):
queryset = Movie.objects.prefetch_related(&amp;#34;directors&amp;#34;)
serializer_class = MovieSerializer
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>You could do one of two things to combat this:&lt;/p>
&lt;ol>
&lt;li>Use non-DRF serializers that are very &lt;strong>explicit&lt;/strong> about prefetching.&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>&lt;code>django-virtual-models&lt;/code>.&lt;/li>
&lt;/ul>
&lt;ol start="2">
&lt;li>Or keep DRF, but:&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>Warn about missing prefetches for each serializer.&lt;/li>
&lt;li>Automatically run necessary prefetches.&lt;/li>
&lt;li>Automatically prevent unnecessary ones.&lt;/li>
&lt;li>Keep serializer nesting support.&lt;/li>
&lt;li>Keep &lt;code>SerializerMethodField&lt;/code> support.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>TLDR: Use tools to be &lt;strong>explicit&lt;/strong> about the data you expect from the DB. Otherwise you&amp;rsquo;ll suffer from performance regressions and your read logic will break frequently.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="a-pythonic-full-text-searchhttps2022djangoconustalksa-pythonic-full-text-search">&lt;a href="https://2022.djangocon.us/talks/a-pythonic-full-text-search/">A pythonic full-text search&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>PostgreSQL added full text search in 2008.&lt;/li>
&lt;li>Django added &lt;a href="https://docs.djangoproject.com/en/4.1/ref/contrib/postgres/search/">full text search&lt;/a> in 2016.&lt;/li>
&lt;li>Paolo has a &lt;a href="https://www.paulox.net/2017/12/22/full-text-search-in-django-with-postgresql/">great article&lt;/a> outlining the various search features.&lt;/li>
&lt;/ul>
&lt;h2 id="home-on-the-range-with-django---getting-comfortable-with-ranges-and-range-fieldshttps2022djangoconustalkshome-on-the-range-with-django-getting">&lt;a href="https://2022.djangocon.us/talks/home-on-the-range-with-django-getting/">Home on the range with Django - getting comfortable with ranges and range fields&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Ranges are everywhere!&lt;/li>
&lt;li>Support for &lt;a href="https://docs.djangoproject.com/en/4.1/ref/contrib/postgres/fields/#range-fields">ranges&lt;/a> was added for PostgreSQL Django in 2015.&lt;/li>
&lt;li>The typical approach is to us &amp;ldquo;start&amp;rdquo; and &amp;ldquo;stop&amp;rdquo; fields, but that gets complicated fast.
&lt;ul>
&lt;li>The DB doesn&amp;rsquo;t know these two fields are related.&lt;/li>
&lt;li>You have to manually add bounding/validation/constraint logic.&lt;/li>
&lt;li>Queries can get weird/complicated.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Ranges fix all this!
&lt;ul>
&lt;li>1 field that stores lower, upper, and boundary information.&lt;/li>
&lt;li>Automatically validates/constrains values.&lt;/li>
&lt;li>Easy/Intuitive queries.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Ranges (Math):
&lt;ul>
&lt;li>Ranges = Intervals, Inclusive = Closed, Exclusive = Open&lt;/li>
&lt;li>(exclusive, exclusive) - (1, 3) - 2&lt;/li>
&lt;li>[inclusive, exclusive) - [1, 3) - 1, 2 &lt;code>The default for Django ranges!&lt;/code>&lt;/li>
&lt;li>(exclusive, inclusive] - (1, 3] - 2, 3&lt;/li>
&lt;li>[inclusive, inclusive] - [1, 3] - 1, 2, 3&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>There are lots of very useful query filters!
&lt;ul>
&lt;li>&lt;code>__overlap&lt;/code>, &lt;code>__contains&lt;/code>, &lt;code>__adjacent_to&lt;/code>, &lt;code>__fully_lt/gt&lt;/code>, etc.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Django supports a number of different value types via &lt;code>pysycopg2.extra&lt;/code>.
&lt;ul>
&lt;li>You can also create custom types! Example: IP ranges!&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Pitfalls
&lt;ul>
&lt;li>Limited Django Admin support.&lt;/li>
&lt;li>You have to use &lt;code>Cast&lt;/code> when using &lt;code>F()&lt;/code>.&lt;/li>
&lt;li>You have to use &lt;code>Lower&lt;/code> and &lt;code>Upper&lt;/code> database functions to access values.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Resources
&lt;ul>
&lt;li>&lt;code>psycopg2.extras&lt;/code>&lt;/li>
&lt;li>&lt;code>django-range-merge&lt;/code>&lt;/li>
&lt;li>&lt;code>django-generate-series&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul><a href="mailto: reply@djpeacher.com?subject=Re:%20DjangoCon%20US%202022%3a%20Day%203">Reply via email</a></description></item><item><title>DjangoCon US 2022: Day 2</title><link>https://www.djpeacher.com/posts/djangocon-us-22-day-2/</link><pubDate>Tue, 18 Oct 2022 00:00:00 +0000</pubDate><guid>https://www.djpeacher.com/posts/djangocon-us-22-day-2/</guid><description>
&lt;h2 id="keeping-track-of-architectural-ish-decisions-in-a-sustainable-wayhttps2022djangoconustalkskeeping-track-of-architectural-ish-in-a">&lt;a href="https://2022.djangocon.us/talks/keeping-track-of-architectural-ish-in-a/">Keeping track of architectural-ish decisions in a sustainable way&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>The Problem
&lt;ul>
&lt;li>&lt;strong>Is there a problem?&lt;/strong> Image a new coworker asks why a particular decision was made, but no one knows. We lose relevant information of the decision making process (e.g. context and alternatives considered).&lt;/li>
&lt;li>&lt;strong>Why is this a problem?&lt;/strong> We cannot reliably reflect on our decisions, onboard new people, or evolve.&lt;/li>
&lt;li>&lt;strong>What&amp;rsquo;s causing this?&lt;/strong> Perhaps our tools are not specifically designed to capture changes, nor why they changed.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Architectural Decisions: The thing we need to capture.
&lt;ul>
&lt;li>&lt;strong>Architectural Decisions (AD)&lt;/strong>: A software design choice&amp;hellip;that is architecturally significant. It&amp;rsquo;s an AD if you need to ask:
&lt;ul>
&lt;li>Should we meet to discuss this?&lt;/li>
&lt;li>What framework should we use?&lt;/li>
&lt;li>Could we use [shiny-new-thing] for this?&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Architecturally Significant Requirement (ASR)&lt;/strong>: A requirement that has a measurable effect.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://cognitect.com/blog/2011/11/15/documenting-architecture-decisions">Architectural Decision Record&lt;/a> (ADR) [&lt;a href="https://18f.gsa.gov/2021/07/06/architecture_decision_records_helpful_now_invaluable_later/">also&lt;/a>]: The tool we can use to capture.
&lt;ul>
&lt;li>&lt;strong>What is an ADR?&lt;/strong> A short, practical to fill, text file describing a specific AD. Like a journal entry to future developers.&lt;/li>
&lt;li>&lt;strong>Who is it for?&lt;/strong> Primarily for developers and technology staff.&lt;/li>
&lt;li>&lt;strong>What&amp;rsquo;s in it?&lt;/strong>:
&lt;ul>
&lt;li>Context: Why did this need to happen? What need to be considered?&lt;/li>
&lt;li>Options: What were the options? What were the pros/cons of each?&lt;/li>
&lt;li>Consequences: What will happen as a result?&lt;/li>
&lt;li>Status: Has the decision been implemented or superseded?&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Where does it live?&lt;/strong> Close to code (benefits from peer reviewing and discoverability), wiki, or something else.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Takeaways:
&lt;ul>
&lt;li>Leads teams to consensus.&lt;/li>
&lt;li>Prevents knowledge hoarding.&lt;/li>
&lt;li>Gets new maintainers up to speed.&lt;/li>
&lt;li>Not one person with critical knowledge.&lt;/li>
&lt;li>Shows maintainers if a change they&amp;rsquo;d like to do has been considered previously.&lt;/li>
&lt;li>Can be used as justification to stakeholders.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="django-migrations-pitfalls-and-solutionshttps2022djangoconustalksdjango-migrations-pitfalls-and-solutions">&lt;a href="https://2022.djangocon.us/talks/django-migrations-pitfalls-and-solutions/">Django Migrations: Pitfalls and Solutions&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Migrations and Branches
&lt;ul>
&lt;li>Rewinding migrations only works if the relevant migration files are in the codebase, regardless of applied migrations.&lt;/li>
&lt;li>This can cause problems when switching branches with divergent migrations. Solutions:
&lt;ul>
&lt;li>Reverse migrations before switching branches.&lt;/li>
&lt;li>Restore a backup from before you ran either branch&amp;rsquo;s migrations.&lt;/li>
&lt;li>Use backward compatible migrations.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>A similar problem occurs when trying to merge two branches with divergent migrations. Solution:
&lt;ul>
&lt;li>&lt;code>python manage.py makemigration -merge&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Reversible Migrations
&lt;ul>
&lt;li>Migrations are not time travel&amp;hellip;database backups are!&lt;/li>
&lt;li>Common rewind errors include, using &lt;code>RunPython&lt;/code> with no reverse function, removing a constraint if data has been added that violates that constraint, or deleting a field that is non-null and has no default.&lt;/li>
&lt;li>You can improve reversibility by backing up your database, set fields as nullable for some time before deleting them, and using a reverse function with &lt;code>RunPython&lt;/code> (or at least use &lt;code>noop&lt;/code>).&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Backwards Compatible Migrations
&lt;ul>
&lt;li>The Deployment Race Condition: When, during deployment, the codebase and database will be out of sync! This can cause errors on your site if a request comes in while they are out of sync.&lt;/li>
&lt;li>Assuming you are adding to the database more often than removing, you can reduce the frequency of this issue by migrating the database first, then deploying your new code.&lt;/li>
&lt;li>For all other cases, you should try to create backwards compatible migration, i.e. migrations that once applied still work with you old code before that it gets updated.&lt;/li>
&lt;li>Some migrations trivially backwards compatible:
&lt;ul>
&lt;li>Ops with no DB schema change (RunPython, changing choices, squashing migrations, etc.)&lt;/li>
&lt;li>Adding a nullable field.&lt;/li>
&lt;li>Adding a model.&lt;/li>
&lt;li>Removing/Relaxing a constraint.&lt;/li>
&lt;li>Adding a constraint that all existing data/code already meets.&lt;/li>
&lt;li>Removing a model that isn&amp;rsquo;t referenced.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Others, are not. For those, we want to try and get those to &amp;ldquo;look&amp;rdquo; like the above list.
&lt;ul>
&lt;li>You can make some migration noops by using legacy database names.
&lt;ul>
&lt;li>To rename a field, set &lt;code>db_column&lt;/code> to the old name, and django will not update the database.&lt;/li>
&lt;li>To rename a model, set &lt;code>db_table&lt;/code> to old name, and django will not update the database.&lt;/li>
&lt;li>You can even move models between apps an avoid schema changes by using &lt;code>db_table&lt;/code> and &lt;code>SperateDatabaseAndState&lt;/code>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>You can decompose some migrations into two deploys.
&lt;ul>
&lt;li>Adding a constraint: First deploy code that satisfies constraint, then deploy migration to update data.&lt;/li>
&lt;li>Removing a model: First deploy code that remove all references, then deploy migration to remove the model.&lt;/li>
&lt;li>Remove a field: First deploy code that deprecates the field using &lt;code>django-deprecate-fields&lt;/code> and remove all code references, then deploy migration to remove the field.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>For all other, more complicated, cases, use scheduled downtime (maintenance mode).
&lt;ul>
&lt;li>Split/Merge fields/models.&lt;/li>
&lt;li>Change field types.&lt;/li>
&lt;li>Do &amp;ldquo;true&amp;rdquo; field/model renames.&lt;/li>
&lt;li>Compress multiple releases into one.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Failed Migrations
&lt;ul>
&lt;li>If your migrations fail, be aware that:
&lt;ul>
&lt;li>You should abort your deployment.&lt;/li>
&lt;li>Each migration is atomic, but the group of them are not.&lt;/li>
&lt;li>If your migrations are not backwards compatible, your users will be getting errors (unless you are in maintenance mode).&lt;/li>
&lt;li>If your migrations are not backwards compatible, your database will be in an incompatible state, and you can&amp;rsquo;t use &lt;code>manage.py shell&lt;/code>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>To fix this:
&lt;ul>
&lt;li>Avoid this to begin with by testing against production data!&lt;/li>
&lt;li>Correct data with &lt;code>manage.py shell&lt;/code>, assuming your migrations were backwards compatible.&lt;/li>
&lt;li>Push the broken migration onto the server (because you should have aborted the deployment), and reverse them (assuming they were reversible).&lt;/li>
&lt;li>Restore database to a backup.&lt;/li>
&lt;li>&lt;code>manage.py dbshell&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="django-through-the-yearshttps2022djangoconustalksdjango-through-the-years">&lt;a href="https://2022.djangocon.us/talks/django-through-the-years/">Django Through the Years&lt;/a>&lt;/h2>
&lt;p>Not much to say about this, other than it was a very fun history lesson! ❤️&lt;/p>
&lt;h2 id="just-enough-ops-for-developershttps2022djangoconustalksjust-enough-ops-for-developers">&lt;a href="https://2022.djangocon.us/talks/just-enough-ops-for-developers/">Just enough ops for developers&lt;/a>&lt;/h2>
&lt;p>My main takeaway here was the following &lt;a href="https://fastapi.tiangolo.com/async/">fastapi analogy&lt;/a>:&lt;/p>
&lt;ul>
&lt;li>CPU = Cook&lt;/li>
&lt;li>Process = Cashier&lt;/li>
&lt;li>Request = Customer&lt;/li>
&lt;/ul>
&lt;h2 id="your-first-deployment-shouldnt-be-so-hardhttps2022djangoconustalksyour-first-deployment-shouldn-t-be-so">&lt;a href="https://2022.djangocon.us/talks/your-first-deployment-shouldn-t-be-so/">Your First Deployment Shouldn&amp;rsquo;t Be So Hard!&lt;/a>&lt;/h2>
&lt;p>Django is great, until you get to deployment, at which point there are a billion different ways to do it. This can be a barrier to entry for new developers and for experienced developers who need to prototype rapidly&amp;hellip;enter &lt;code>django-simple-deploy&lt;/code>.&lt;/p>
&lt;p>Prerequisites:&lt;/p>
&lt;ul>
&lt;li>A simple Django project.&lt;/li>
&lt;li>Use requirements.txt, Poetry, or Pipenv.&lt;/li>
&lt;li>Use Git.&lt;/li>
&lt;li>Have the target platform&amp;rsquo;s CLI installed with an active account.&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>$ pip install django-simple-deploy
# Add simple deploy to INSTALLED APPS.
$ manage.py simple_deploy --platform fly_io --automate-all
# Profit!
&lt;/code>&lt;/pre><a href="mailto: reply@djpeacher.com?subject=Re:%20DjangoCon%20US%202022%3a%20Day%202">Reply via email</a></description></item><item><title>DjangoCon US 2022: Day 1</title><link>https://www.djpeacher.com/posts/djangocon-us-22-day-1/</link><pubDate>Mon, 17 Oct 2022 00:00:00 +0000</pubDate><guid>https://www.djpeacher.com/posts/djangocon-us-22-day-1/</guid><description>
&lt;h2 id="the-django-admin-is-your-oyster-lets-extend-its-functionalityhttps2022djangoconustalksthe-django-admin-is-your-oyster-lets-its">&lt;a href="https://2022.djangocon.us/talks/the-django-admin-is-your-oyster-lets-its/">The Django Admin Is Your Oyster: Let’s Extend Its Functionality&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Don&amp;rsquo;t make it easy for attackers to find your admin page&amp;hellip;don&amp;rsquo;t use &lt;code>/admin&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Override &lt;code>ModelAdmin.get_search_results&lt;/code> to speed up searching.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Remember to use &lt;code>prefetch_related&lt;/code> and &lt;code>select_related&lt;/code> to reduce DB queries.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Add optional checkboxes to change forms to kickoff extra functions when saved.&lt;/p>
&lt;ul>
&lt;li>You can also dynamically set help text for better UX.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>You can use multiple databases in a single admin.&lt;/p>
&lt;pre tabindex="0">&lt;code># Migrate
$ python manage.py --database=sandbox
# settings.py
DATABASES = {
&amp;#39;default&amp;#39;: {...},
&amp;#39;sandbox&amp;#39;: {...}
}
# utils.py
class SandboxAdminModel(admin.ModelAdmin):
using = &amp;#39;sandbox&amp;#39;
def save_model(self, request, obj, form, change):
obj.save(using=self.using)
def delete_model(self, request, obj):
obj.delete(using=self.using)
def get_queryset(self, request):
return super().get_queryset(request).using(self.using)
# admin.py
@admin.register(MySandboxModel)
class MySandboxModelAdmin(SandboxModelAdmin):
...
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>Extend &lt;code>change_form.html&lt;/code> to add help text for the whole model, not just fields.&lt;/p>
&lt;pre tabindex="0">&lt;code># change_form.html
{% extends &amp;#34;admin/change_form.html&amp;#34; %}
{% block form_top %}
{{ original.admin_help_text }}
{% endblock %}
# models.py
class MyModel(models.Model):
admin_help_text = &amp;#34;...&amp;#34;
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>Create custom actions for bulk changes.&lt;/p>
&lt;pre tabindex="0">&lt;code># admin.py
def increase_msrp_by_8_perc(modeladmin, request, queryset):
...
@admin.register(Car)
class CarAdmin(admin.ModelAdmin):
actions = [increase_msrp_by_8_perc]
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul>
&lt;h2 id="documenting-django-code-in-2022https2022djangoconustalksdocumenting-django-code-in-2022">&lt;a href="https://2022.djangocon.us/talks/documenting-django-code-in-2022/">Documenting Django Code in 2022&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://diataxis.fr">https://diataxis.fr&lt;/a>: A framework for authoring technical documentation.&lt;/li>
&lt;/ul>
&lt;h2 id="you-dont-need-containers-to-run-django-in-productionhttps2022djangoconustalksyou-don-t-need-containers-to-run-django">&lt;a href="https://2022.djangocon.us/talks/you-don-t-need-containers-to-run-django/">You Don&amp;rsquo;t Need Containers to Run Django in Production&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>When &lt;strong>should&lt;/strong> you use containers? When you have&amp;hellip;
&lt;ul>
&lt;li>Thousands of programmers.&lt;/li>
&lt;li>Millions of users.&lt;/li>
&lt;li>Billions in valuation.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>There is a lot of FOMO around containers. For example, reproducibility is a big selling point for containers, but generally, this benefit is rarely taken advantage of.&lt;/li>
&lt;li>Some downsides of using containers are added &lt;a href="https://landscape.cncf.io">complexity&lt;/a> and cost.&lt;/li>
&lt;li>What do we want in production?
&lt;ul>
&lt;li>Secure environment.&lt;/li>
&lt;li>Protection against malicious users.&lt;/li>
&lt;li>Don&amp;rsquo;t want to wake up in the middle of the night.&lt;/li>
&lt;li>Seamless code updates.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Web Server (WSGI vs ASGI):
&lt;ul>
&lt;li>WSGI is 20 years old&amp;hellip;and it shows.
&lt;ul>
&lt;li>Limited concurrency.&lt;/li>
&lt;li>Graphic: &lt;em>Showed that as clients scale with &lt;code>gunicorn&lt;/code>, response time gets worse. The graph represented a BEST case scenario.&lt;/em>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ASGI is 5 years old&amp;hellip;and it shows.
&lt;ul>
&lt;li>Unlimited concurrency (ignoring memory).&lt;/li>
&lt;li>Graphic: &lt;em>Showed that as clients scale with &lt;code>uvicorn&lt;/code>, response time gets worse. The graph represented a WORST case scenario.&lt;/em>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Reverse Proxy (nginx):
&lt;ul>
&lt;li>Can help limit concurrency as needed.&lt;/li>
&lt;li>nginx can handle 20 million RPM on a 8 core VM.&lt;/li>
&lt;li>Caddy is a new/easier alternative, but nginx is tried and tested.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Process Monitor (SystemD)&lt;/li>
&lt;li>Deployment (Git Deploy Config)&lt;/li>
&lt;li>Bonus Tip: Use software that offers LTS.&lt;/li>
&lt;/ul>
&lt;h1 id="herding-your-database-queries-diagnosing-improving-and-guarding-performance-of-db-interactions-in-your-django-appshttps2022djangoconustalksherding-your-database-queries-diagnosing">&lt;a href="https://2022.djangocon.us/talks/herding-your-database-queries-diagnosing/">Herding your database queries: diagnosing, improving and guarding performance of DB interactions in your Django apps&lt;/a>&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://engineering.pathai.com/herding-your-database-queries-in-django">Blog Post&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Tools like &lt;code>django-debug-toolbar&lt;/code> and &lt;code>django-silk&lt;/code> are great for diagnosing rogue queries, but there can be cases where these tools are not going to help directly (e.g. with a js frontend).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>To solve this, they rolled their own &lt;a href="https://github.com/Path-AI/django-request-stats-example/blob/main/req_stats/middleware.py">custom middleware&lt;/a> to analyze queries per request and output the result to the terminal.&lt;/p>
&lt;pre tabindex="0">&lt;code>Received request GET /library/books/, status 200, db_query_count=29, db_query_time_ms=136.421, duration_ms=192.56
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>After you optimize your queries, you can protect yourself from regression with unit tests by taking advantage of &lt;a href="https://pytest-django.readthedocs.io/en/latest/helpers.html#django-assert-max-num-queries">django_assert_max_num_queries&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>You can also use &lt;a href="https://coverage.readthedocs.io/en/6.4.3/contexts.html">coverage context&lt;/a> to check new endpoints that are created and don&amp;rsquo;t have unit tests.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="the-django-jigsaw-puzzle-aligning-all-the-pieceshttps2022djangoconustalksthe-django-jigsaw-puzzle-aligning-all">&lt;a href="https://2022.djangocon.us/talks/the-django-jigsaw-puzzle-aligning-all/">The Django Jigsaw Puzzle: Aligning All the Pieces&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>(other) MVC == MVT (django)
&lt;ul>
&lt;li>Model == Model&lt;/li>
&lt;li>View == Template&lt;/li>
&lt;li>Controller == View&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>The Django Admin is great, but if your &lt;code>admin.py&lt;/code> is growing past 20 lines, you might be relying on it too much.&lt;/li>
&lt;li>&lt;code>django-extensions&lt;/code>: One of the things it does is auto import models in the django shell.&lt;/li>
&lt;li>Don&amp;rsquo;t use &lt;code>/admin&lt;/code>!&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> WSGI Server
┌────────────────────────────────────────────────┐
│ Middlware │
│ ┌────────────────────────────────────────────┐ │
│ │ Django app │ │
HTTP request │ │ ┌────────────────────────────────────────┐ │ │
─────────────► ┌──────────┐ ──► │ │ │ ┌────────┐ ┌─────┐ ┌──────┐ │ │ │ ┌─────────┐
Browser │Web Server│ │ │ │ │URL conf│ ──► │ │ ─── │Models│ ───┼─┼─┼── │Databases│
◄───────────── └──────────┘ ◄── │ │ │ └────────┘ │ │ └──────┘ │ │ │ └─────────┘
HTTP response ▲ │ │ │ │Views│ │ │ │
│ │ │ │ │ │ ┌─────────┐ │ │ │
▼ │ │ │ │ │ ─── │Templates│ │ │ │
┌──────┐ │ │ │ └─────┘ └─────────┘ │ │ │
│ File │ │ │ └────────────────────────────────────────┘ │ │
│System│ │ └────────────────────────────────────────────┘ │
└──────┘ └────────────────────────────────────────────────┘
&lt;/code>&lt;/pre>&lt;h2 id="nurturing-a-legacy-codebasehttps2022djangoconustalksnurturing-a-legacy-codebase">&lt;a href="https://2022.djangocon.us/talks/nurturing-a-legacy-codebase/">Nurturing a &amp;ldquo;Legacy&amp;rdquo; Codebase&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>What is a &amp;ldquo;legacy&amp;rdquo; codebase?
&lt;ul>
&lt;li>Code with, potentially forgotten, history.&lt;/li>
&lt;li>Code that follow outdated conventions.&lt;/li>
&lt;li>Usually still running in production.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Should you evolve or rebuild? Ask yourself&amp;hellip;
&lt;ul>
&lt;li>Does the code meet current requirements?&lt;/li>
&lt;li>Are there frequent or sever production issues?&lt;/li>
&lt;li>How healthy are the dependencies?&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Lets say you choose &amp;ldquo;evolve,&amp;rdquo; what should you do?
&lt;ul>
&lt;li>Automated tests with good coverage.&lt;/li>
&lt;li>Upgrade/Replace outdated dependencies.&lt;/li>
&lt;li>Use a linter and/or &lt;code>black&lt;/code> for code formatting.&lt;/li>
&lt;li>Use &lt;code>pre-commit&lt;/code> for cross-team consistency.&lt;/li>
&lt;li>Make sure current devs understand the story of the code.&lt;/li>
&lt;li>Help future devs by writing detailed commit messages along with an issue tracker.&lt;/li>
&lt;li>Document!&lt;/li>
&lt;li>Build a culture of leaving clues for the future!&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul><a href="mailto: reply@djpeacher.com?subject=Re:%20DjangoCon%20US%202022%3a%20Day%201">Reply via email</a></description></item><item><title>Quick Hugo Deploy with GitHub Actions</title><link>https://www.djpeacher.com/posts/quick-hugo-deploy-with-github-actions/</link><pubDate>Thu, 18 Aug 2022 00:00:00 +0000</pubDate><guid>https://www.djpeacher.com/posts/quick-hugo-deploy-with-github-actions/</guid><description>
&lt;p>Once you have your &lt;a href="https://gohugo.io">Hugo&lt;/a> project setup, all you need to do is push the following GitHub Action to deploy! &lt;i class="twa twa-rocket">&lt;/i>&lt;/p>
&lt;pre tabindex="0">&lt;code>name: Build
on:
push:
branches: [main]
workflow_dispatch:
jobs:
build:
runs-on: ubuntu-latest
steps:
- uses: actions/checkout@v2
with:
submodules: true
fetch-depth: 0
- uses: peaceiris/actions-hugo@v2
- run: hugo --minify
- uses: JamesIves/github-pages-deploy-action@v4
with:
branch: gh-pages
folder: public
&lt;/code>&lt;/pre>
&lt;figure>&lt;figcaption>.github/workflows/build.yml&lt;/figcaption>&lt;/figure>
&lt;p>This action does three things each time you push to &lt;code>main&lt;/code>:&lt;/p>
&lt;ol>
&lt;li>Pulls your repository, including all submodules.&lt;/li>
&lt;li>Builds your site with the Hugo CLI.&lt;/li>
&lt;li>Deploys the build to GitHub Pages via the &lt;code>gh-pages&lt;/code> branch.&lt;/li>
&lt;/ol>
&lt;p>That&amp;rsquo;s it. After a few moments, your site should now be live at:&lt;/p>
&lt;pre tabindex="0">&lt;code>https://&amp;lt;username&amp;gt;.github.io/&amp;lt;repository&amp;gt;/
&lt;/code>&lt;/pre>&lt;p>If you want a custom domain for this site, you can &lt;a href="https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/about-custom-domains-and-github-pages">configure a custom domain&lt;/a> with GitHub Pages.&lt;/p><a href="mailto: reply@djpeacher.com?subject=Re:%20Quick%20Hugo%20Deploy%20with%20GitHub%20Actions">Reply via email</a></description></item><item><title>How to Be a Lazy Dungeon Master</title><link>https://www.djpeacher.com/posts/how-to-be-a-lazy-dungeon-master/</link><pubDate>Wed, 03 Aug 2022 00:00:00 +0000</pubDate><guid>https://www.djpeacher.com/posts/how-to-be-a-lazy-dungeon-master/</guid><description>
&lt;h2 id="the-lazy-dungeon-masters-checklist">The Lazy Dungeon Master&amp;rsquo;s Checklist&lt;/h2>
&lt;p>The steps it takes to prepare a typical game session can be boiled down into a simple checklist:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#review-the-characters">Review the characters&lt;/a>&lt;/li>
&lt;li>&lt;a href="#create-a-strong-start">Create a strong start&lt;/a>&lt;/li>
&lt;li>&lt;a href="#outline-potential-scenes">Outline potential scenes&lt;/a>&lt;/li>
&lt;li>&lt;a href="#define-secrets-and-clues">Define secrets and clues&lt;/a>&lt;/li>
&lt;li>&lt;a href="#develop-fantastic-locations">Develop fantastic locations&lt;/a>&lt;/li>
&lt;li>&lt;a href="#outline-important-npcs">Outline important NPCs&lt;/a>&lt;/li>
&lt;li>&lt;a href="#choose-relevant-monsters">Choose relevant monsters&lt;/a>&lt;/li>
&lt;li>&lt;a href="#select-magic-item-rewards">Select magic item rewards&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="review-the-characters-hahahugoshortcodes0hbhb">Review the characters &lt;i class="twa twa-thinking-face">&lt;/i>&lt;/h3>
&lt;p>The first thing you need to do is write down the names, backgrounds, motivations, and desires of the characters. Use these notes to prime your brain and tie the characters to the rest of your game.&lt;/p>
&lt;h3 id="create-a-strong-start-hahahugoshortcodes1hbhb">Create a strong start &lt;i class="twa twa-flexed-biceps-light-skin-tone">&lt;/i>&lt;/h3>
&lt;p>Set the stage by asking yourself, what&amp;rsquo;s happening, what&amp;rsquo;s the point, and where&amp;rsquo;s the action? We are looking for an event, hook, and closest action in one, maybe two, sentences. When in doubt, start with combat.&lt;/p>
&lt;h3 id="outline-potential-scenes-hahahugoshortcodes2hbhb">Outline potential scenes &lt;i class="twa twa-clapper-board">&lt;/i>&lt;/h3>
&lt;p>Write down a short list of scenes that &lt;strong>might&lt;/strong> occur in your game. Only write down as much as you need to prime your brain. These scenes are not in any specific order and may not even occur.&lt;/p>
&lt;h3 id="define-secrets-and-clues-hahahugoshortcodes3hbhb">Define secrets and clues &lt;i class="twa twa-magnifying-glass-tilted-right">&lt;/i>&lt;/h3>
&lt;p>Write down ten secrets and clues the characters &lt;strong>might&lt;/strong> discover during your game. These secrets and clues bring your campaign to life and reveal small pieces of the story or history of the world. They should be abstract enough to allow you to improvise their discovery during the game.&lt;/p>
&lt;h3 id="develop-fantastic-locations-hahahugoshortcodes4hbhb">Develop fantastic locations &lt;i class="twa twa-national-park">&lt;/i>&lt;/h3>
&lt;p>Develop one or two locations that the characters &lt;strong>might&lt;/strong> discover for every hour of play you expect to have. These locations need to have an evocative name, three fantastic aspects, and be described using age and size. It is also a good idea to tie some of these locations to the backgrounds of the characters.&lt;/p>
&lt;h3 id="outline-important-npcs-hahahugoshortcodes5hbhb">Outline important NPCs &lt;i class="twa twa-robot">&lt;/i>&lt;/h3>
&lt;p>Prepare a few NPCs that the characters &lt;strong>might&lt;/strong> discover and will drive the game session and the adventure. Improvise others during the game. NPC outlines should be brief and include a name, connection to the adventure, and a character archetype.&lt;/p>
&lt;h3 id="choose-relevant-monsters-hahahugoshortcodes6hbhb">Choose relevant monsters &lt;i class="twa twa-man-zombie">&lt;/i>&lt;/h3>
&lt;p>Make a list of monsters the characters &lt;strong>might&lt;/strong> encounter that make sense for the story, situation, and location of your game. Don&amp;rsquo;t tie these monsters to any specific location or situation. Instead, improvise encounters based on the story and situation during the game. For boss fights, remember to account for character capabilities without negating those capabilities.&lt;/p>
&lt;h3 id="select-magic-item-rewards-hahahugoshortcodes7hbhb">Select magic item rewards &lt;i class="twa twa-magic-wand">&lt;/i>&lt;/h3>
&lt;p>Players love magic items! Regularly ask the players what kinds of items they&amp;rsquo;d like to discover. Use that information to make a list of magic items that the characters &lt;strong>might&lt;/strong> discover during your game. When it fits the story, drop an item into the game. You can also drop in random magic items for some variability. You can tie magic items to the story by connecting them to quests, secrets, or clues.&lt;/p>
&lt;h2 id="adventuremd">adventure.md&lt;/h2>
&lt;p>The Lazy Dungeon Master&amp;rsquo;s Checklist should easily fit on a single page. Here is a markdown template for your next session!&lt;/p>
&lt;p>Roll for initiative! &lt;i class="twa twa-game-die">&lt;/i>&lt;/p>
&lt;pre tabindex="0">&lt;code>## The Strong Start
Description of your strong start.
## Potential Scenes
- Description of your scene.
-
## Secrets and Clues
- Description of a secret or clue.
-
-
-
-
-
-
-
-
-
## Fantastic Locations
**Location**: aspect, aspect, aspect
**Location**: aspect, aspect, aspect
**Location**: aspect, aspect, aspect
## NPCs
**Name.** Description/Connection. *Character* from *X*.
**Name.** Description/Connection. *Character* from *X*.
**Name.** Description/Connection. *Character* from *X*.
## Monsters
- Name
-
## Magic Items
- Name/Description
-
&lt;/code>&lt;/pre><a href="mailto: reply@djpeacher.com?subject=Re:%20How%20to%20Be%20a%20Lazy%20Dungeon%20Master">Reply via email</a></description></item><item><title>Python Version Manager 101 (pyenv)</title><link>https://www.djpeacher.com/posts/pyenv/</link><pubDate>Mon, 28 Feb 2022 00:00:00 +0000</pubDate><guid>https://www.djpeacher.com/posts/pyenv/</guid><description>
&lt;p>When you boot up a new machine, it will usually come preinstalled with a version of Python. You can verify this by running the following:&lt;/p>
&lt;pre tabindex="0">&lt;code># This shows the version installed.
$ python -V
Python 2.7.18
# This shows the location of the installation.
$ which python
/usr/bin/python
&lt;/code>&lt;/pre>&lt;p>That&amp;rsquo;s great, but &lt;strong>do not use &amp;ldquo;System Python.&amp;rdquo;&lt;/strong> It came with your operating system because it is a dependency that should not be tampered with. Doing so could harm your system or the very least, cause you a lot of grief down the road.&lt;/p>
&lt;p>You could work around this by manually installing other versions of Python, but that is hard to manage and can get messy fast, especially if you have multiple projects depending on &lt;strong>different&lt;/strong> versions of Python.&lt;/p>
&lt;p>Instead of dealing with all that, you might want to invest of few minutes setting up a &lt;strong>Python Version Manager&lt;/strong>, in this case, &lt;code>pyenv&lt;/code>, that will let you easily switch between multiple versions of Python.&lt;/p>
&lt;p>If that sounds good to you, continue reading to learn how to install and use &lt;code>pyenv&lt;/code>.&lt;/p>
&lt;h2 id="installation">Installation&lt;/h2>
&lt;p>I&amp;rsquo;m not going to get super specific on the installation of &lt;code>pyenv&lt;/code> because it depends on the machine you are working with. These instructions are what got me set up on my specific machine (M1 Mac using Zsh), so your mileage may vary. Here are the official instructions if these don&amp;rsquo;t work for you.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://brew.sh">homebrew&lt;/a>, the missing package manager for macOS.&lt;/li>
&lt;li>&lt;a href="https://github.com/pyenv/pyenv#installation">pyenv&lt;/a>, the python version manager.&lt;/li>
&lt;li>&lt;a href="https://github.com/pyenv/pyenv-virtualenv#installation">pyenv-virtualenv&lt;/a>, a virtualenv plugin for &lt;code>pyenv&lt;/code>.&lt;/li>
&lt;/ul>
&lt;h3 id="dependencies">Dependencies&lt;/h3>
&lt;p>Before you can install &lt;code>pyenv&lt;/code>, you need to install all its dependencies.&lt;/p>
&lt;pre tabindex="0">&lt;code># Install Xcode Command Line Tools
xcode-select --install
# Install Homebrew
/bin/bash -c &amp;#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&amp;#34;
echo &amp;#39;export PATH=/opt/homebrew/bin:$PATH&amp;#39; &amp;gt;&amp;gt; ~/.zshrc
# Install Python build dependencies
brew install openssl readline sqlite3 xz zlib
&lt;/code>&lt;/pre>&lt;h3 id="install-pyenv">Install &lt;code>pyenv&lt;/code>&lt;/h3>
&lt;p>Now we can install &lt;code>pyenv&lt;/code> using &lt;code>brew&lt;/code> and configure your terminal to let &lt;code>pyenv&lt;/code> dictate which version of Python you are using.&lt;/p>
&lt;pre tabindex="0">&lt;code># Install pyenv
brew install pyenv pyenv-virtualenv
# Configure shell environment
echo &amp;#39;eval &amp;#34;$(pyenv init --path)&amp;#34;&amp;#39; &amp;gt;&amp;gt; ~/.zshrc
echo &amp;#39;eval &amp;#34;$(pyenv virtualenv-init -)&amp;#34;&amp;#39; &amp;gt;&amp;gt; ~/.zshrc
echo &amp;#39;if which pyenv-virtualenv-init &amp;gt; /dev/null; then eval &amp;#34;$(pyenv virtualenv-init -)&amp;#34;; fi&amp;#39; &amp;gt;&amp;gt; ~/.zprofile
&lt;/code>&lt;/pre>&lt;p>You know you&amp;rsquo;ve set everything up correctly if you see the following:&lt;/p>
&lt;pre tabindex="0">&lt;code># You&amp;#39;ve installed pyenv!
$ pyenv --version
pyenv 2.2.4
# pyenv put itself between your system and terminal!
# Notice that the installation path is different now.
$ which python
/Users/&amp;lt;user&amp;gt;/.pyenv/shims/python
&lt;/code>&lt;/pre>&lt;h2 id="usage">Usage&lt;/h2>
&lt;p>With &lt;code>pyenv&lt;/code> installed, we can do some powerful stuff!&lt;/p>
&lt;ul>
&lt;li>Install pretty much whatever version of Python we want.&lt;/li>
&lt;li>Create virtualenvs that act like separate Python installations.&lt;/li>
&lt;li>Set the global, local, and shell versions of Python we want to use.&lt;/li>
&lt;/ul>
&lt;h3 id="how-it-works">How It Works&lt;/h3>
&lt;p>By default, &lt;code>pyenv&lt;/code> will use &amp;ldquo;System Python,&amp;rdquo; which as I mentioned we shouldn&amp;rsquo;t use, so we need to install other versions. When you install a new version of Python using &lt;code>pyenv&lt;/code>, it stores them in its root directory (&lt;code>~/.pyenv&lt;/code>).&lt;/p>
&lt;p>After we install the versions of Python we want, we need to tell &lt;code>pyenv&lt;/code> where and when we want to use each version by using the &lt;code>global&lt;/code>, &lt;code>local&lt;/code>, and &lt;code>shell&lt;/code> commands.&lt;/p>
&lt;ul>
&lt;li>When we use the &lt;code>global&lt;/code> command, we are setting the global Python version. &lt;code>pyenv&lt;/code> records this information in this file &lt;code>~/.pyenv/version&lt;/code>.&lt;/li>
&lt;li>When we use the &lt;code>local&lt;/code> command, we are setting the local application-specific Python version. This will apply to all its subdirectories as well! &lt;code>pyenv&lt;/code> records this information by creating a file in the current directory called &lt;code>.python-version&lt;/code>.&lt;/li>
&lt;li>When we use the &lt;code>shell&lt;/code> command, we are setting the shell-specific Python version. &lt;code>pyenv&lt;/code> records this information by setting the &lt;code>$PYENV_VERSION&lt;/code> environment variable.&lt;/li>
&lt;/ul>
&lt;h4 id="so-how-does-pyenv-decide-which-version-to-use">So how does &lt;code>pyenv&lt;/code> decide which version to use?&lt;/h4>
&lt;p>As we move between directories &lt;code>pyenv&lt;/code> searches for the files and environment variable we set above and processes them in the following order:&lt;/p>
&lt;ol>
&lt;li>&lt;code>$PYENV_VERSION&lt;/code>. This version will be used if set.&lt;/li>
&lt;li>&lt;code>.python-version&lt;/code>. This version will be used if this file exists.&lt;/li>
&lt;li>&lt;code>~/.pyenv/version&lt;/code>. This version will be used if this file exists.&lt;/li>
&lt;li>If none of these exist, it will use &amp;ldquo;System Python&amp;rdquo;.&lt;/li>
&lt;/ol>
&lt;h4 id="what-about-virtualenvs">What about virtualenvs?&lt;/h4>
&lt;p>Working with virtualenvs is extremely simple. All we have to do is use the &lt;code>virtualenv&lt;/code> command and specify the version of Python we want to use. &lt;code>pyenv&lt;/code> then creates the virtualenv it&amp;rsquo;s root directory which we can use with the &lt;code>global&lt;/code>, &lt;code>local&lt;/code>, and &lt;code>shell&lt;/code> commands, just like the full Python installations!&lt;/p>
&lt;p>And if you configured your shell correctly, you don&amp;rsquo;t even have to run any &lt;code>activate&lt;/code> or &lt;code>deactivate&lt;/code> commands, &lt;code>pyenv&lt;/code> will handle that when you enter and leave directories.&lt;/p>
&lt;h3 id="command-overview">Command Overview&lt;/h3>
&lt;p>Now that you have a basic understanding of how &lt;code>pyenv&lt;/code> works, here is an overview of its available commands.&lt;/p>
&lt;h4 id="install">&lt;code>install&lt;/code>&lt;/h4>
&lt;p>Install a Python version using python-build. &lt;code>pyenv&lt;/code> builds each installation from source, so it could be a few seconds for this command to complete.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ pyenv install 3.10.2
&lt;/code>&lt;/pre>&lt;h4 id="uninstall">&lt;code>uninstall&lt;/code>&lt;/h4>
&lt;p>Uninstall a specific Python version.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ pyenv uninstall 3.10.2
&lt;/code>&lt;/pre>&lt;h4 id="versions">&lt;code>versions&lt;/code>&lt;/h4>
&lt;p>List all Python versions available to pyenv.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ pyenv versions
system
* 3.10.2 (set by /Users/&amp;lt;user&amp;gt;/.pyenv/version)
&lt;/code>&lt;/pre>&lt;p>Notice that there is a &lt;code>*&lt;/code> indicating what is the active version of Python and it tells you how &lt;code>pyenv&lt;/code> decided to use that version.&lt;/p>
&lt;h4 id="global">&lt;code>global&lt;/code>&lt;/h4>
&lt;p>Set or show the global Python version.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ pyenv global
system
$ pyenv global 3.10.2
$ pyenv global
3.10.2
$ python -V
Python 3.10.2
&lt;/code>&lt;/pre>&lt;p>This will update the &lt;code>/Users/&amp;lt;user&amp;gt;/.pyenv/version&lt;/code> file.&lt;/p>
&lt;h4 id="local">&lt;code>local&lt;/code>&lt;/h4>
&lt;p>Set or show the local application-specific Python version.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ pyenv local
pyenv: no local version configured for this directory
$ pyenv local 3.10.2
$ pyenv local
3.10.2
$ python -V
Python 3.10.2
&lt;/code>&lt;/pre>&lt;p>This will create or update the &lt;code>.python-version&lt;/code> file in the current directory.&lt;/p>
&lt;h4 id="shell">&lt;code>shell&lt;/code>&lt;/h4>
&lt;p>Set or show the shell-specific Python version.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ pyenv shell
pyenv: no shell-specific version configured
$ pyenv shell 3.10.2
$ pyenv shell
3.10.2
$ python -V
Python 3.10.2
&lt;/code>&lt;/pre>&lt;p>This will set the &lt;code>$PYENV_VERSION&lt;/code> environment variable.&lt;/p>
&lt;h4 id="virtualenv">&lt;code>virtualenv&lt;/code>&lt;/h4>
&lt;p>Creates a Python virtualenv in the &lt;code>pyenv&lt;/code> root directory.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ pyenv virtualenv [version] &amp;lt;name&amp;gt;
&lt;/code>&lt;/pre>&lt;p>If no version number is given, the current active version will be used. You can name the virtualenv whatever you want, but it is best practice to name it the same as the relevant project.&lt;/p>
&lt;h4 id="virtualenv-delete">&lt;code>virtualenv-delete&lt;/code>&lt;/h4>
&lt;p>Uninstall a specific Python virtualenv.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ pyenv virtualenv-delete &amp;lt;name&amp;gt;
&lt;/code>&lt;/pre>&lt;h4 id="virtualenvs">&lt;code>virtualenvs&lt;/code>&lt;/h4>
&lt;p>List all Python virtualenvs.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ pyenv virtualenv project
$ pyenv virtualenvs
3.10.2/envs/project (created from /Users/&amp;lt;user&amp;gt;/.pyenv/versions/3.10.2)
project (created from /Users/&amp;lt;user&amp;gt;/.pyenv/versions/3.10.2)
&lt;/code>&lt;/pre>&lt;p>You will see two entries per virutalenv (&lt;code>pyenv versions&lt;/code> does the same thing). In this example, &lt;code>3.10.2/envs/project&lt;/code> is the actual virtualenv and &lt;code>project&lt;/code> is a shorthand simlink to that folder.&lt;/p>
&lt;p>Once a vitualenv is created, we can use it along with the &lt;code>global&lt;/code>, &lt;code>local&lt;/code>, and &lt;code>shell&lt;/code> commands!&lt;/p>
&lt;pre tabindex="0">&lt;code>$ pyenv local project
$ pyenv local
project
&lt;/code>&lt;/pre>&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>I hope by reading this post you see how useful having a version manager like &lt;code>pyenv&lt;/code> can be and were able to get up and running quickly. I know I sure have!&lt;/p>
&lt;p>If you have any feedback, click the button below. I&amp;rsquo;d love to hear from you!&lt;/p><a href="mailto: reply@djpeacher.com?subject=Re:%20Python%20Version%20Manager%20101%20%28pyenv%29">Reply via email</a></description></item><item><title>Immune Part 1: Meet Your Immune System</title><link>https://www.djpeacher.com/posts/immune-part-1/</link><pubDate>Wed, 23 Feb 2022 00:00:00 +0000</pubDate><guid>https://www.djpeacher.com/posts/immune-part-1/</guid><description>
&lt;div class="notice">
If you’d like to read the whole thing yourself and support the author, you can buy the book (not affiliated): &lt;a href="https://sites.prh.com/immune">https://sites.prh.com/immune&lt;/a>
&lt;/div>
&lt;h2 id="what-is-the-immune-system">What is the Immune System?&lt;/h2>
&lt;p>3.5 billion years ago, cells figured out how to gather resources by leeching off of other cells. 541 million years ago,
multicellular life formed and developed systems to defend against intruders. While we can’t directly analyze ancient
immune systems, we can study it via the tree of life. The farther separated two creatures are on the tree and still
share the same trait, the older the trait must generally be.&lt;/p>
&lt;p>Modern animals are the height of the immune system development which at its core is a tool to distinguish the &lt;strong>other&lt;/strong>
from the &lt;strong>self&lt;/strong>. While distinguishing the other from the self is the &lt;em>core&lt;/em>, it is not the &lt;em>goal&lt;/em>. Its overall goal is
to achieve &lt;em>homeostasis&lt;/em>, what we call health.&lt;/p>
&lt;p>Ultimately the battle to stay healthy is futile and will be lost in the end, but our immune system fights to keep us
going a little bit longer. Our immune system can also go wrong and be corrupted. When tricked, it can help spread
diseases, protect cancer cells, cause allergies, and even get confused and deceive the body itself is the enemy. When
too enthusiastic, it can cause unpleasant systems while it’s doing its job and can even cause death.&lt;/p>
&lt;h2 id="what-is-there-to-defend">What Is There to Defend?&lt;/h2>
&lt;p>Immune cells are tasked with protecting the ~40 trillion cells in your body. Most threats are stopped by the skin, but
intruders can still enter via your mucus membranes: windpipe, lungs, eyelids, mouth, nose, stomach, intestines,
reproductive traces, and bladder.&lt;/p>
&lt;h2 id="what-are-your-cells">What Are Your Cells?&lt;/h2>
&lt;p>Cells are the smallest units of life that we can clearly identify. Generally, something is alive if it separates itself
from the universe around it, has a metabolism (intakes outside resources and expels inside garbage), responds to
stimuli, grows, and can make more of itself. Cells are not conscious, have free will, or feelings. They are essentially
biological robots. Cells have various “organs” inside them called organelles. These organs are surrounded by millions of
molecules. Half of which are water molecules and other half consists of 1k-10k different kinds of proteins.&lt;/p>
&lt;p>Proteins are the most fundamental organic building blocks and can be used for basically everything, from sending
signals, constructing simple wall/structures to complex micromachines. Proteins are made from chains of amino acids
(organic building blocks that come in 20 different varieties). A typical protein has 50-2000 amino acids (30k is largest
known). There are billions of billions of possible proteins, but only 1-million to 1-billion useful ones. Your cells
know which proteins to make thanks to the instructions on your DNA.&lt;/p>
&lt;p>About 1% of your DNA is made up of building manuals for proteins. The rest is responsible for regulating which proteins
are built when and how and how many of them at which time. Instructions on DNA are converted into proteins in a two-step
process: 1. Special proteins read DNA and covers it into messenger molecules call mRNA (the language DNA uses to
communicate orders). 2. The mRNA is then taken from the nucleus to the proteus production center called the ribosome.
Here, mRNA is read and translated into amino acids that are put together in the order they arrived.&lt;/p>
&lt;p>In the world of proteins, shape is everything. Their shapes determine what they can and can’t do. A proteins shape is
determined by the amino acids it has and their sequence. As a protein is built, the chain folds together into a specific
shape. Proteins work by interacting with each other in very complex ways. They move and interact by wiggling really
fast. Because of their scale they behave very different compared to a human scale and can in theory move up to 5m/s if
they were not surrounded by other molecules. This motion is called Brownian motion and is why water is so important for
cells and leads to biological pathways.&lt;/p>
&lt;p>Biological pathways is a fancy word to describe a series of interactions between individual things that lead to a change
in a cell. A proteins specific shape enable them to fit together or interact with other proteins in specific ways.
Sequences of these interactions, called pathways, cause cells to do things. An individual cell is pretty dump, but many
cells working are pretty smart. The phenomenon occurs in many places in nature and is called emergence. It is the
observation that the whole has properties and abilities that the parts do not have.&lt;/p>
&lt;h2 id="the-empires-and-kingdoms-of-the-immune-system">The Empires and Kingdoms of the Immune System&lt;/h2>
&lt;p>Your Immune System consists of two major realms: Innate and Adaptive Immunity.&lt;/p>
&lt;p>Your Innate Immune System is ready to fight after birth, and can identify if an enemy is not self, but other. It does
the down-and-dirty hand-to-hand combat, but it also determines what broad category your enemies fall in and how
dangerous they are. And finally it has the power to activate your second line of defense:&lt;/p>
&lt;p>Your Adaptive Immune System, which needs a few years before it is ready to deploy efficiently. It is specific and can
draw from an incredibly large library to fight every possible individual enemy that nature can throw at it, with
powerful super weapons. But while it is powerful, one of its most important jobs is to make the Innate Immune System
even stronger.&lt;/p><a href="mailto: reply@djpeacher.com?subject=Re:%20Immune%20Part%201%3a%20Meet%20Your%20Immune%20System">Reply via email</a></description></item><item><title>What Am I?</title><link>https://www.djpeacher.com/posts/what-am-i/</link><pubDate>Tue, 22 Feb 2022 00:00:00 +0000</pubDate><guid>https://www.djpeacher.com/posts/what-am-i/</guid><description>
&lt;p>I am someone who generally writes code using web-based technologies. What am I? This question has bugged me for years and I think I&amp;rsquo;ve finally come to a conclusion.&lt;/p>
&lt;p>If you like spoilers, look at my &lt;a href="https://www.djpeacher.com/">home page&lt;/a> or the &lt;a href="#okay-so-what-am-i">conclusion&lt;/a> below. If not, here is my breakdown. Keep in mind that there exists many more titles than I mention below, but I am just trying to focus on my field. This is also just based on what I&amp;rsquo;ve been exposed to and I am happy to be proven wrong.&lt;/p>
&lt;p>So what am I? Let&amp;rsquo;s start at the beginning&amp;hellip;&lt;/p>
&lt;h2 id="programmercoder">Programmer/Coder&lt;/h2>
&lt;p>I am 100% a programmer and a coder. Those two words essentially mean the same thing. I write programs with code.&lt;/p>
&lt;p>While I think all other titles fall under this category, I do not consider it a job title. It&amp;rsquo;s just too generic to represent an occupation.&lt;/p>
&lt;h2 id="software-engineer-vs-software-developer">Software Engineer vs. Software Developer&lt;/h2>
&lt;p>Going a level deeper, we find Software Engineers and Software Developers. As far as I can tell, both of these mean the same thing, and the word &amp;ldquo;Software&amp;rdquo; is optional. These titles represent anyone who designs and creates systems to solve problems.&lt;/p>
&lt;p>So I am a [Software] Engineer/Developer?&lt;/p>
&lt;h2 id="web-vs-mobile-vs-desktop">Web vs. Mobile vs. Desktop&lt;/h2>
&lt;p>Well, we can go another layer deeper and specialize in web, mobile, or desktop applications which produces these lovely titles:&lt;/p>
&lt;ul>
&lt;li>Web [Software] Engineer/Developer&lt;/li>
&lt;li>Mobile [Software] Engineer/Developer&lt;/li>
&lt;li>Desktop [Software] Engineer/Developer&lt;/li>
&lt;/ul>
&lt;p>They all do the same thing, just in their respective specialization.&lt;/p>
&lt;p>So am I any of these? Well yes, I primarily specialize in the web, but with tools like React Native, Expo, and Electron, those lines are beginning to blur.&lt;/p>
&lt;h2 id="full-stack-vs-backend-vs-frontend">Full-Stack vs. Backend vs. Frontend&lt;/h2>
&lt;p>Unfortunately, we can go yet another layer deeper and specialize in the frontend, backend, or even both layers of an application, thus producing even more titles:&lt;/p>
&lt;ul>
&lt;li>Full-Stack [Web/Software] Engineer/Developer&lt;/li>
&lt;li>Backend [Web/Software] Engineer/Developer&lt;/li>
&lt;li>Frontend/UI [Web/Software] Engineer/Developer&lt;/li>
&lt;/ul>
&lt;p>These terms primarily get used in web environments (which is why I wrote &amp;ldquo;Web/Software&amp;rdquo;), but they could also apply to mobile and desktop.&lt;/p>
&lt;p>This one is easy for me. I work across the entire stack, so I must be a Full-Stack [Web/Software] Engineer/Developer?&lt;/p>
&lt;h2 id="okay-so-what-am-i">Okay, so what am I?&lt;/h2>
&lt;p>I am someone who designs and creates systems to solve problems on the web across both the frontend and backend. And thanks to cross-platform technologies, it has never been easier for me to take my web development skills and port them over to mobile and desktop environments. Based on this description, the best titles for me are:&lt;/p>
&lt;ul>
&lt;li>Engineer&lt;/li>
&lt;li>Developer&lt;/li>
&lt;li>Software Engineer&lt;/li>
&lt;li>Software Developer&lt;/li>
&lt;/ul>
&lt;p>All these titles encompass what I currently do and where my capabilities lie. I work across the stack, primarily in web environments, but depending on the technologies I could port those skills over to mobile and desktop. That said, I could see some ambiguity if I just used Engineer or Developer. So we are down to two:&lt;/p>
&lt;ul>
&lt;li>Software Engineer&lt;/li>
&lt;li>Software Developer&lt;/li>
&lt;/ul>
&lt;p>At this point, it just comes down to personal preference, so just because it sounds cooler&amp;hellip;&lt;/p>
&lt;p>I am a &lt;strong>Software Engineer&lt;/strong>!&lt;/p>
&lt;p>Here is a title breakdown:&lt;/p>
&lt;pre tabindex="0">&lt;code>- Programmer/Coder
+ [Software] Engineer/Developer
- Web [Software] Engineer/Developer
+ Full-Stack [Web/Software] Engineer/Developer
+ Backend [Web/Software] Engineer/Developer
+ Frontend/UI [Web/Software] Engineer/Developer
- Mobile [Software] Engineer/Developer
- Desktop [Software] Engineer/Developer
&lt;/code>&lt;/pre>&lt;h2 id="further-reading">Further Reading&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=2GonoPx9DgU">The Difference Between A Software Engineer And A Software Developer&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=ys7V9JSTE5A">What does &amp;ldquo;Senior&amp;rdquo; Software Engineer mean?&lt;/a>&lt;/li>
&lt;/ul><a href="mailto: reply@djpeacher.com?subject=Re:%20What%20Am%20I%3f">Reply via email</a></description></item><item><title>New Computer Who Dis?</title><link>https://www.djpeacher.com/posts/new-computer-who-dis/</link><pubDate>Mon, 21 Feb 2022 00:00:00 +0000</pubDate><guid>https://www.djpeacher.com/posts/new-computer-who-dis/</guid><description>
&lt;h2 id="install">Install&lt;/h2>
&lt;p>&lt;strong>Command Line Tools&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>xcode-select --install
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Oh My Zsh&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>sh -c &amp;#34;$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&amp;#34;
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Homebrew&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>/bin/bash -c &amp;#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&amp;#34;
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>&lt;a href="https://github.com/pyenv/pyenv/wiki">pyenv&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://formulae.brew.sh/formula/node#default">node&lt;/a> (need to consider a package manager)&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Applications&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://code.visualstudio.com/download">Visual Studio Code&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.docker.com/get-docker/">Docker&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://apps.apple.com/us/app/1password-7-password-manager/id1333542190?mt=12">1Password&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://apps.apple.com/us/app/things-3/id904280696?mt=12">Things 3&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://bjango.com/mac/istatmenus/">iStat Menus 6&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://apps.apple.com/us/app/magnet/id441258766?mt=12">Magnet&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://apps.apple.com/us/app/bandwidth/id490461369?mt=12">Bandwidth+&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://apps.apple.com/us/app/progress-bar/id1441939775?mt=12">Progress&lt;/a>&lt;/li>
&lt;/ul><a href="mailto: reply@djpeacher.com?subject=Re:%20New%20Computer%20Who%20Dis%3f">Reply via email</a></description></item><item><title>SWR 101 - React Hooks for Data Fetching</title><link>https://www.djpeacher.com/posts/swr-101/</link><pubDate>Fri, 10 Sep 2021 00:00:00 +0000</pubDate><guid>https://www.djpeacher.com/posts/swr-101/</guid><description>
&lt;p>&lt;a href="https://swr.vercel.app">SWR&lt;/a> is a fast, lightweight, and reusable data fetching package for React that uses the &lt;a href="https://tools.ietf.org/html/rfc5861">&lt;code>stale-while-revalidate&lt;/code>&lt;/a> caching strategy. By using this package, you can simplify and enhance your project&amp;rsquo;s data fetching logic.&lt;/p>
&lt;p>Normally, data is fetched in a top level component using &lt;code>useEffect&lt;/code> and passed down to its children using props. Additionally, logic must be added to handle errors and revalidation. This can lead to complicated and messy codebases, especially when data is needed throughout a large component tree. Enter, SWR.&lt;/p>
&lt;pre tabindex="0">&lt;code>npm install swr
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>import useSWR from &amp;#39;swr&amp;#39;;
const fetcher = (url) =&amp;gt; fetch(url).then((r) =&amp;gt; r.json());
function App() {
return (
&amp;lt;div&amp;gt;
&amp;lt;Welcome /&amp;gt;
&amp;lt;Avatar /&amp;gt;
&amp;lt;/div&amp;gt;
);
}
function Welcome() {
const { data, error } = useSWR(&amp;#39;/api/user&amp;#39;, fetcher);
if (error) return &amp;lt;div&amp;gt;error&amp;lt;/div&amp;gt;;
if (!data) return &amp;lt;div&amp;gt;loading&amp;lt;/div&amp;gt;;
return &amp;lt;div&amp;gt;Welcome {data.name}!&amp;lt;/div&amp;gt;;
}
function Avatar() {
const { data, error } = useSWR(&amp;#39;/api/user&amp;#39;, fetcher);
if (error) return &amp;lt;div&amp;gt;error&amp;lt;/div&amp;gt;;
if (!data) return &amp;lt;div&amp;gt;loading&amp;lt;/div&amp;gt;;
return &amp;lt;img src={data.avatar} alt={data.name} /&amp;gt;;
}
&lt;/code>&lt;/pre>&lt;p>In the example above, the &lt;a href="https://swr.vercel.app/docs/options">&lt;code>useSWR(key, fetcher, options)&lt;/code>&lt;/a> hook returns &lt;code>data&lt;/code> from cache (initially undefined), then sends a fetch request using &lt;code>fetcher&lt;/code> (a custom fetch function that can use any library you want), and finally updates &lt;code>data&lt;/code> and the cache from the response.&lt;/p>
&lt;p>The amazing thing here is that data is independent of the component tree (parents don&amp;rsquo;t need to know anything or pass props) and because &lt;code>useSWR&lt;/code> uses a &lt;code>key&lt;/code> to fetch data, it avoids duplicate requests by sharing the cached data across all components (only 1 request is made). Not to mention that it handles errors and revalidation out of the box!&lt;/p>
&lt;p>We can even make reusable hooks to make common fetch requests even easier to perform!&lt;/p>
&lt;pre tabindex="0">&lt;code>function useUser() {
const { data, error } = useSWR(`/api/user/`, fetcher);
return {
user: data,
isLoading: !error &amp;amp;&amp;amp; !data,
isError: error,
};
}
&lt;/code>&lt;/pre>&lt;p>&lt;a href="https://swr.vercel.app">SWR&lt;/a> is a powerful package that simplifies and streamlines your data fetching logic. I&amp;rsquo;ve only touched on the core aspects of the package. For further reading, check out the links below.&lt;/p>
&lt;h2 id="further-reading">Further Reading&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://swr.vercel.app/docs/options">Options&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://swr.vercel.app/docs/global-configuration">Global Configuration&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://swr.vercel.app/docs/error-handling">Error Handling&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://swr.vercel.app/docs/revalidation">Revalidation&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://swr.vercel.app/docs/revalidation#revalidate-on-focus">onFocus&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://swr.vercel.app/docs/revalidation#revalidate-on-interval">onInterval&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://swr.vercel.app/docs/revalidation#revalidate-on-reconnect">onReconnect&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://swr.vercel.app/docs/conditional-fetching">Conditional Data Fetching&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://swr.vercel.app/docs/mutation">Mutation&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://swr.vercel.app/docs/pagination">Pagination&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://swr.vercel.app/examples/basic">Examples&lt;/a>&lt;/li>
&lt;/ul><a href="mailto: reply@djpeacher.com?subject=Re:%20SWR%20101%20-%20React%20Hooks%20for%20Data%20Fetching">Reply via email</a></description></item></channel></rss>